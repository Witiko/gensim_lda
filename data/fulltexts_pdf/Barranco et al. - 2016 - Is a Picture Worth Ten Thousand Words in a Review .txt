Is a Picture Worth Ten Thousand Words
in a Review Dataset?
Roberto Camacho, Laura M. Rodriguez, Rebecca Urbina, and M. Shahriar Hossain
Dept. of Computer Science, University of Texas at El Paso, El Paso, TX 79968
rcamachobarranco@utep.edu, {lmrodriguez3, rurbina5}@miners.utep.edu, mhossain@utep.edu
ABSTRACT
While textual
reviews have become prominent in many re-
commendation-based systems, automated frameworks to pro-
vide relevant visual cues against text reviews where pictures
are not available is a new form of task confronted by data
mining and machine learning researchers.
Suggestions of
pictures that are relevant to the content of a review could
significantly benefit the users by increasing the effectiveness
of
a review.
We propose a deep learning-based framework
to automatically:
(1) tag the images available in a review
dataset, (2) generate a caption for each image that does not
have one,
and (3) enhance each review by recommending
relevant images that might not be uploaded by the corre-
sponding reviewer.
We evaluate the proposed framework
using the Yelp Challenge Dataset.
While a subset of the im-
ages in this particular dataset are correctly captioned,
the
majority of
the pictures do not have any associated text.
Moreover,
there is no mapping between reviews and im-
ages.
Each image has a corresponding business-tag where
the picture was taken,
though.
The overall
data setting
and unavailability of crucial
pieces required for a mapping
make the problem of
recommending images for reviews a
major challenge.
Qualitative and quantitative evaluations
indicate that our proposed framework provides high quality
enhancements through automatic captioning,
tagging,
and
recommendation for mapping reviews and images.
CCS Concepts
•Information systems → Data mining; Document topic
models; •Computing methodologies → Neural networks;
Keywords
Yelp dataset,
review enhancement,
recommender systems,
image captioning, image classification
1.
INTRODUCTION
The usefulness of a review-based website (e.g., Yelp) largely
depends on the quality of the materials produced by the re-
Permission to make digital or hard copies of all or part of this work for personal or
classroom use is granted without fee provided that copies are not made or distributed
for profit or commercial advantage and that copies bear this notice and the full cita-
tion on the first page.
Copyrights for components of this work owned by others than
ACM must be honored. Abstracting with credit is permitted. To copy otherwise, or re-
publish, to post on servers or to redistribute to lists, requires prior specific permission
and/or a fee. Request permissions from permissions@acm.org.
c
2016 ACM. ISBN 978-1-4503-2138-9.
DOI:
10.1145/1235
viewers.
The heterogeneous nature of these materials pro-
vides a tremendous possibility to enhance user experience.
For example,
text reviews and images shared by many re-
viewers can be used to create snippets for users to quickly ob-
tain a feeling about the business.
Karvonen, et al.
[19] show
that visually prominent UI elements,
such as images,
play
an important role in review-based decision making.
How-
ever, production of mixtures of text and images is a difficult
task for a review dataset due to the use of
colloquial
lan-
guage, incorrect captioning of images, and insufficient labels
for each of the images.
Moreover, the images are captured by
cameras of unknown configuration in uncontrolled environ-
ments,
thus making extraction of image-features and map-
ping the features with textual units very challenging for any
kind of
enhancement.
We propose a framework composed
of a palette of deep learning and data mining techniques to
recommend images for each review, even if a review was not
originally submitted with a picture.
In doing so, we predict
tags for each image,
generate captioning phrases for these
images, and finally map reviews with the most relevant im-
ages.
We leverage the data published by Yelp for the Yelp Dataset
Challenge [39].
The scope of
this paper is limited to the
review and photo datasets pertaining only to restaurants.
The dataset contains 25,071 restaurants,
1,363,242 reviews
of these restaurants, and 98,786 images.
Many of the images
do not have labels or captions, which are the primary links
to connect reviews with images because the dataset does not
provide an existing mapping between them.
Our framework
consists of
three main components:
1) an image classifier
Figure 2:
Enhanced review prototype
Wu et al.
used machine learning methods to automate
image tagging.
In their paper they explore and compare
several
di↵erent methods to cluster similar images and the
relevant tags.
The machine learning algorithm would first
identify the images and categorize them.
After that,
the
similar images’
tags were compared to tag the images in a
better way.
Therefore we researched more about each part
of
their methodology:
Image similarity,
object recognition
and synonym extraction [7].
4.1
Image similarity
Measuring image similarity involves the complicated task
of extracting low-level features (such as color, texture, shape,
etc.).
Liu surveys
several
content
based image retrieval
(CBIR) systems, which usually use segmentation techniques
in order to identify the di↵erent regions within the image.
The closeness between the regions in one image and another
are then measured with metrics such as the Minkowsky dis-
tance or the cosine coefficient.
However,
the problem with
segmentation techniques,
is that they are mostly inefficient
if applied to natural-scene images because they do not have
homogeneous colors and textures [4].
Riu and Huang present some of
the most basic similar-
ity measures that exist,
including the histogram and RGB
algorithms which focus on the grayscale and color intensi-
ties,
respectively,
of
all
the pixels in an image.
Another
approach that has been previously explored is that of unsu-
pervised machine learning [5].
This is the approach that we
will probably rely more on for our project.
Clustering algo-
rithms are central to unsupervised machine learning.
Thus,
we will
have to work with techniques such as k-means and
NCut clustering.
4.2
Object recognition
One of the goals we are trying to realize is finding similar
objects in a picture in order to give better related images
and tags.
Unlike image similarity, which uses the attributes
of
photographs,
object recognition is used to extract and
classify objects in pictures.
The usage of object recognition
to classify an image has been previously studied by Li
[3]
which system finds objects in a photo,
and comes up with
a semantic label for them, in order to classify what type of
event is happening in the photo.
A few problems with using object recognition have been
classified as correspondence problems by Berg [2].
Intra-
category variation, occlusion and clutter, and pose changes
of 3D objects can create problems for classifying algorithms.
Considering most photos on Yelp are taken by customers and
not professionals it’s important we keep these problems in
mind when choosing an algorithm.
Berg uses geometric blur
in an attempt to fix these problems.
This method blurs an
object from di↵erent points in its shape and gives an edge
channel
that can then be tested for correspondence with
another image [2].
Belongie et al.
describe two di↵erent classification meth-
ods.
The first uses the correspondence and alignment of a
grayscale version of an image.
The second relies on a learn-
ing algorithm that has been given enough examples.
Be-
longie et al
use vector comparisons between images to try
and find similarities between them.
It takes the distance
of points in a subset, an image’s shape context, to create a
histogram that it then uses for comparison[1].
4.3
Synonym extraction
There are di↵erent techniques used for synonym extrac-
tion.Wang and Hirst explored the extraction of
synonyms
and hyponyms using 3 di↵erent methods and compared them
to each other.
The methods they used were:
K-th nearest
neighbor, dictionary graph, exploring patterns in dictionary
definitions (Inverted Index Extraction).
The third method
was the most precise in simple environments whereas the
dictionary graph using a machine learning algorithm worked
best under context [6].
5.
TENTATIVE SOLUTION PLAN
This project will be divided by using our team’s strength
to maximize our potential
and efficiency.
Laura and Omar
have experience working with big data so the two of them
will
be responsible for the reviews.
Roberto and Lucero
have experience working with the analysis of pictures so their
strengths will
be maximized there.
Rebecca is knowledge-
able with GUI interfaces so she will be responsible for that.
6.
REFERENCES
[1]
S. Belongie, J. Malik, and J. Puzicha. Shape matching
and object recognition using shape contexts. Pattern
Analysis and Machine Intelligence, IEEE Transactions
on, 24(4):509–522, 2002.
[2]
A. C. Berg, T. L. Berg, and J. Malik. Shape matching
and object recognition using low distortion
correspondences. In Computer Vision and Pattern
Recognition, 2005. CVPR 2005. IEEE Computer
Society Conference on, volume 1, pages 26–33. IEEE,
2005.
[3]
L.-J. Li and L. Fei-Fei. What, where and who?
classifying events by scene and object recognition. In
Computer Vision, 2007. ICCV 2007. IEEE 11th
International
Conference on, pages 1–8. IEEE, 2007.
[4]
Y. Liu, D. Zhang, G. Lu, and W.-Y. Ma. A survey of
content-based image retrieval with high-level semantics.
Pattern Recognition, 40(1):262–282, 2007.
[5]
Y. Rui, T. S. Huang, and S.-F. Chang. Image retrieval:
Current techniques, promising directions, and open
Figure 1:
Suggested photos for a review describing a ham-
burger meal.
arXiv:1606.07496v1 [cs.CV] 23 Jun 2016
used to predict the label of each image, 2) a captioning algo-
rithm that generates possible captions for images that were
not captioned by the reviewer, and 3) a mechanism to map a
review to a number of most relevant images.
As an outcome
of the proposed framework,
we will
be able to recommend
images for each review as shown in Figure 1.
The paper contributes to the literature by describing a
systematic approach to image recommendation for textual
reviews, with minimal information available to create a map-
ping between both types.
Section 2 outlines the problem and
Section 3 describes the overall framework.
Section 4 lists the
evaluation techniques used.
Section 5 provides descriptions
of the experiments we performed.
The related literature is
described in Section 6 and we conclude the paper in Section
7.
We deployed a Django-based website
1
to visualize the
outcomes.
2.
PROBLEM DESCRIPTION
Let D = {(i
1
, l
1
, c
1
, b
1
), (i
2
, l
2
, c
2
, b
2
), ..., (i
N
, l
N
, c
N
, b
N
)}
be an image dataset containing N images (i),
along with
their corresponding labels (l), captions (c), and business id
(b).
A label
can be a value from the following set of
cat-
egories:
{food,
inside,
outside,
drink,
menu,
none}.
A
caption is expected to be a sentence but can be empty as
well.
Each image has exactly one business id.
Let R = {r
1
, r
2
, ..., r
|R|
} be a text dataset which contains
all
the reviews of
a specific restaurant b.
We seek for a
mapping M,
such that given a review r ∈ R we can select
top k images (i, l, c, b) ∈ D such that the image i is closely
related to review r.
To establish such a mapping, we rely on
relationships between a caption c of an image and review r.
Thus, a major task in the proposed framework is to generate
a caption c for image i, in case one does not exist, which can
then be used to relate i to review r.
In turn,
generating a
caption c is performed using the probabilities of i belonging
to the different possible categories of
l.
In summary,
we
have three subtasks:
(1) generate a label
for images with
none label,
(2) generate caption-words based on the labels
and the subset of images that has captions, and (3) for each
review, find a set of relevant images by topically comparing
the review and the image captions.
3.
METHODOLOGY
Our framework solves the problem of recommending im-
ages for each review in three major steps.
First,
we use an
image classifier to predict a label
for images categorized as
none.
Second,
we use a captioning algorithm,
with the im-
age features (obtained in the first step) and existing captions
as inputs.
This generates caption-words for images that do
not have captions.
Finally, we apply topic modeling on the
reviews and captions separately to be able to create a prob-
abilistic mapping.
The following subsections describe these
steps.
3.1
Image classification
The first step in our framework is to categorize each of the
images labeled as none to one of
the following categories:
food,
inside,
outside,
drink or menu.
Our preliminary
data analysis reveals that more than 25% of the restaurant
images are labeled as none.
We use a Convolutional Neural
1
Available at:
https://auto-captioning.herokuapp.com
Network (CNN) image classifier to obtain class probabilities
for all images in the test set (labeled as none).
Convolutional Neural Network algorithms require that all
of the images have the same dimension and are shaped as a
square.
We resized the images so that the smallest dimen-
sion of the image is 64 or 224 pixels, and then cropped the
image in the other dimension to obtain a 64-by-64-pixel
or
224-by-224-pixel
image.
We tested and implemented CNN
models using two Python 2.7 libraries based on the Theano
deep-learning library [34]:
Keras [6], and Lasagne [10].
Keras
and Lasagne provide high-level
functions
for
deep learn-
ing algorithms,
including convolution,
pooling and fully-
connected layers, as well as backpropagation and optimiza-
tion routines, whereas Theano provides the back-end of the
computation and includes GPU support.
We used a number
of
different
CNN models
to evalu-
ate their accuracy.
One of
these models was based on the
CIFAR10 data [6]
while the others were designed to work
with the ImageNet data [9]:
VGG-16 [31], VGG-19 [31] and
GoogleNet [33].
The CIFAR10 model
is relatively simple,
with only 11 layers.
The VGG-16 model
adds four convo-
lutional
layers and one fully-connected layer,
which signifi-
cantly increases the complexity of the model.
The VGG-19
and GoogleNet models add even a larger number of
lay-
ers,
consisting of
19 and 22,
respectively.
We also used
MATLAB
R
’s Bag-of-Features with SVM classification al-
gorithm as a baseline.
We used six-fold cross validation for
evaluation of all these approaches.
3.2
Image captioning
We leverage a Lasagne-based implementation of the Neu-
ral Image Caption (NIC) generator [35] to predict captions
for images with no caption.
The NIC generator uses a spe-
cial form of a recurrent neural network (RNN) called Long-
Short Term Memory (LSTM) network to sequentially cre-
ate a fixed-dimensional vector, required due to the variable
length of
the input and output sentences.
LSTM nets are
a special type of RNN capable of learning long-term depen-
dencies.
LSTM nets apply weighted layered gates between
the input, output and previous hidden states.
By assigning
different magnitudes to every gate (between 0 and 1),
the
information flow is modified so that the previous informa-
tion is useful for the model, and if not, the model forgets the
information.
LSTM nets are able to train the gates auto-
matically through backpropagation, obtaining a more robust
Figure 2:
Structure of
the Neural
Image Caption (NIC)
generator algorithm.
Figure 3:
A screenshot of our website showing predicted caption-words for an image of a beverage.
model with higher accuracy [14].
The LSTM net uses information about an image as input.
We obtain a lower-dimensional representation for each image
using a Convolutional
Neural
Network (CNN).
Out of
the
several
CNN models described in Section 3.1,
we chose the
GoogLeNet model trained on 224-by-224 images to feed the
image features to the LSTM net because of
GoogLeNet’s
flexible compatibility with LSTM.
The captioning results
presented in this paper are resultant from image features
generated by GoogLeNet.
The complete model
is outlined
in Figure 2.
In the figure, S
i
represents a word of a sentence,
W
e
represents the trained parameters,
p
i
is a probability
distribution over all
the words in the vocabulary and the
log p
i
(s
i
) is the log-likelihood of
the correct word at each
step.
Captions are generated by maximizing the log-likelihood
of the probability of obtaining the correct caption given an
image.
The LSTM net is trained sequentially and takes into
account the image as well as all of the previously seen words
to infer the next word of the output sentence.
At each posi-
tion of the output sentence only the word with the highest
probability is selected,
which has the disadvantage of
not
providing the globally optimal
solution.
The detailed sam-
pling method required for this inference model is described
in [35].
While prediction of
caption-words by learning relation-
ships using existing captions seems a logical
direction,
we
did not target the problem of
correcting captions in case
they are not appropriate.
Based on our study, not reported
in this paper, many of the captions do not describe the rel-
evant image well.
For example,
a caption “Hurrah it’s my
birthday” for a picture of
a pasta dish only increases the
noise-level
rather than providing informative features.
A
possible solution is crowdsourcing a subset of data to obtain
an accurate training set.
However, this aspect is out of the
scope of the current paper.
Figure 3 shows a screenshot of our website for a picture
of
a glass of
margarita.
The suggested caption-words in-
clude margarita as well
as another cocktail,
Bloody Mary.
This sample indicates that our proposed system was able
to closely predict content of the image and map them with
textual snippets.
3.3
Topic modeling and review enhancement
We leverage Latent Dirichlet Allocation (LDA) [4] to model
the topics of the reviews.
For each review, we select the best
topic and select the top t representative terms of that topic,
regardless if
they appear on the review or not.
For each
review, we recommend the top φ images based on the pres-
ence of the t representative terms in the review and in the
captions of the images available for the business for which
the review was written.
An image is ranked higher for a
particular review if a representative term is present both in
the image caption and in the review, compared to an image
which contains the representative term only in its caption.
We start by selecting images using representative terms
that are present in both the review and the image caption.
If
φ images cannot be found,
we select images for which
captions contain representative terms but the review does
not.
This process ensures that the image selection is not
solely driven by overlaps between a review and a caption,
rather reviews and image captions without any overlap may
become candidates for potential mapping due to the use of
topical terms during the ranking.
Figure 1 shows a sample of
recommended images for a text review written for a burger.
4.
EVALUATION
We use different metrics to evaluate the quality of
the
results for each of the main components of the framework:
image classification,
image captioning,
and topic modeling.
For image classification, we use the top-1 accuracy, which is
the percentage of test images that were classified correctly,
as defined by Equation 1.
We only use the top-1 accuracy
because of the small number of possible labels.
accuracy =
images labeled correctly
total images
∗ 100%
(1)
The evaluation of the quality of the image captioning re-
sults was performed using a combination of
two different
metrics:
Bilingual
Evaluation Understudy (BLEU) and a
confidence score.
The BLEU method,
proposed by Pani-
neni
et al.
[28],
computes the geometric mean of
n-gram
precisions.
Since the training set consists mostly of
short
sentences (captions),
we removed the brevity penalty typ-
ically used,
which prevents that very short sentences have
very high scores with just a few words match.
We obtained
a range of BLEU-1 to BLEU-4 scores using the corpus_bleu
function of NLTK, a Python library focused on Natural Lan-
guage Processing.
The BLEU metric has some shortcom-
ings, particularly because it does not take into account the
probability with which a caption is generated.
Because of this limitation, we designed a metric that mea-
sures a confidence score for each generated caption.
When
a caption is being generated,
we take the top k candidate
words at each position in a sentence.
For each position, we
use Equation 2 to measure the non-uniformity of probabili-
ties for the k candidates:
ν(X) =
||U (
1
k
) − X||
1
2 − 2/k
(2)
where X is the normalized probability distribution of the top
k candidates where k > 1,
and U is a uniform probability
distribution over size k.
Ideally,
we would like a very high
non-uniformity value (ν(X) = 1) which means that we are
very confident that the top word should be next.
A uniform
distribution (ν(X) = 0) would indicate a random selection
of
top words.
We compute the confidence for a generated
caption with the following equation:
Confidence(W ) =
h
P
m
i=1
(e
ν(v(w
i
))∗p(w
i
)
)
i
− m
[m ∗ e
1
] − m
(3)
where W is an array of
m words,
W = {w
1
, w
2
, ..., w
m
}
representing the generated sentence, v(w) is the normalized
truncated probability distribution of
top k words for each
position in the sentence in which w has the highest proba-
bility,
and p(w) is the probability of
the word w from the
original
distribution.
This metric has a range of
[0.0, 1.0],
where higher confidence is better.
The evaluation of
the LDA topics was performed using
perplexity, which measures the model fit of an unseen set of
documents,
where the value decreases as a function of
the
log-likelihood of
the holdout documents.
An LDA model
with lower perplexity is better.
We use the following bounded
definition of perplexity, presented by Hoffman, et al. [17]:
perplexity(n
test
, λ, α) ≤ exp{−(
X
i
E
q
[log p(n
test
i
, θ
i
, z
i
|α, β)]
−E
q
[log q(θ
i
, z
i
)])(
X
i,w
n
test
iw
)}
(4)
Where n
test
is the total
word count of
the holdout docu-
ments,
λ is the posterior parametrization over β,
α is the
Dirichlet parameter, n
test
i
is the word count of holdout doc-
ument i,
θ
i
is a vector of
topic weights for document i,
z
i
Table 1:
Characteristics of the Griffin cluster.
Component
Technology
Nodes
(7x) Compute Nodes
(2x) AMD Opteron 6220
8 cores/processor
Processor
1 thread/core
Memory (RAM)
4GB/core
Hard Drive
1TB SATA 7.2K RPM 16MB cache
(2x) NVIDIA Tesla M2090, 1.3GHz
512 CUDA cores
Video Card
6GB GDDR5
is a vector of
per-word topic assignments for the words in
document i,
β is a dictionary of
topics,
q is a variational
distribution which is indexed by a set of
free parameters,
and n
test
iw
is the number of times the word w appears in the
holdout document i.
5.
EXPERIMENTS
In this section, we seek to answer the following questions
about the proposed framework.
1.
How do different CNN architectures compare in terms
of the accuracy of image classification? How do these
results compare with a simpler method, e.g.
SVM us-
ing bag-of-features? (Section 5.1)
2.
How does changing model hyperparameters for the NIC
generator affect the results in terms of confidence and
BLEU-4 score? What is the relationship between the
confidence score and the BLEU score for the generated
captions? (Section 5.2)
3.
How well does our framework generate captions for the
images of the Yelp dataset? (Section 5.3)
4.
How does varying different hyperparameters affect the
perplexity of the resulting LDA model? (Section 5.4)
5.
Can we relate reviews with images based on the top
words obtained through topic modeling? (Section 5.5)
We focused on the 25,071 (out of
77,445) restaurants de-
tected in the Yelp dataset.
The restaurant image dataset
contains
98,786 images
with an average of
4 images
per
restaurant;
62% of
the images do not contain any caption
and 25% are labeled as none.
The total
number of reviews
for restaurants is 1,363,242.
Deep Neural
Networks,
such as CNNs and LSTM nets,
require large memory and computing-power.
We used two
different devices for our experiments:
an ASUS K501UX
laptop,
and the Griffin computing cluster,
at the Univer-
sity of Texas at El
Paso.
The ASUS laptop has a 2.5 GHz
Intel
Core i7 6500U processor,
8GB memory,
and NVIDIA
GTX950M 914 MHz 2GB video card.
Due to the low mem-
ory capacity of the NVIDIA GTX950M, the laptop was lim-
ited to training images of 64 by 64 pixels.
Table 1 provides
the configuration of the Griffin computing cluster.
5.1
Image classification
We tested different CNN architectures to compare the ac-
curacy obtained with each of them for the image classifica-
tion problem.
The architectures include:
a simple CIFAR10
model
(11-layer deep),
VGG-16 [31]
(16-layer deep),
VGG-
19 [31]
(19-layer deep) and GoogleNet [33]
(22-layer deep).
We also used the MATLAB
R
Bag-of-Features-based SVM
classifier as a baseline,
to verify the gain in accuracy ob-
tained by using a neural network versus a simpler method.
Table 2:
Results for image classification based on labels.
Model
Image
size
Learn.
rate
Epochs
Accy.
Simple model
64 x 64
0.0001
160
94.12%
VGG-16
64 x 64
0.0001
160
94.78%
VGG-16
224 x 224
0.001
10
83.79%
VGG-19
224 x 224
0.001
10
78.93%
GoogleNet
224 x 224
0.001
10
88.21%
BoF SVM
64 x 64
N/A
N/A
69.00%
Table 3:
Detailed results for image classification using im-
ages of 64 by 64 pixels.
CIFAR10 model
VGG-16 model
Epochs
160 epochs
Image size
64 x 64 pixels
Average time
(sec per epoch)
188
1,220
Total time
∼8 hours
∼54 hours
Best training
accuracy
95.70%
99.78%
Best test
accuracy
94.12%
94.78%
All
of
the models were used to classify the images into
five different classes.
The weight initialization for all
the
CNN models was a uniform random distribution between
−0.5 and 0.5.
Table 2 presents the configurations used and
the accuracy obtained for each model.
The results indi-
cate that using neural
networks improves significantly the
accuracy of the image classification models.
The models us-
ing 64-by-64-pixel
images were trained from scratch using
Keras, while the models using 224-by-224-pixel images were
trained with Lasagne after initializing the model weights to
the ones obtained using the ImageNet dataset.
This, along
with the smaller learning rate and the higher number of
epochs trained,
might explain the higher accuracy of
the
models trained with 64-by-64-pixel images.
Table 3 presents more details about the results for the
models that use images of
64 by 64 pixels.
Each of
these
models was trained for 160 epochs.
The VGG-16 model ob-
tained 94.78% accuracy on the test data, while the CIFAR10
model obtained a 94.12% accuracy.
Our observation is that
the difference in the accuracy for the training data is sig-
nificantly larger,
and that the error on this dataset for the
160
140
120
100
80
60
40
20
100%
90%
80%
70%
60%
50%
40%
Epochs
Accuracy
CIFAR10
VGG16
Model
Figure 4:
Accuracy per epoch on testing data.
VGG-16 model
is very small
(0.22%).
Thus,
the VGG-16
model might be overfitting the training data.
The VGG-16 model took significantly longer to train com-
pared to the simple model, with 54 hours against the 8 hours
that the CIFAR10 model required.
This is a result of the dif-
ference in the number of layers, and in particular the number
of convolution operations required by each model.
While the
CIFAR10 model only has one convolutional layer, the VGG-
16 has five.
Figure 4 shows how the accuracy for both of the models
changes as the number of epochs increases.
As can be seen,
the CIFAR10 model
outperforms the VGG-16 for the first
five epochs.
After the sixth iteration,
the VGG-16 model
appears to be consistently better than CIFAR10,
albeit by
a small margin.
The graph also shows that the accuracy of
each classifier seems to reach a steady state, but the accuracy
still
varies from epoch to epoch,
which indicates that the
training may be reduced to around 60 epochs.
To further evaluate the CNN model
used for the image
captioning component
of
our
framework,
GoogLeNet,
we
performed a participant-based evaluation of
the predicted
labels of 240 randomly selected images originally labeled as
None.
All these images and the predicted labels were given
to one participant for evaluation.
The participant was asked
to mark the predicted labels as correct or incorrect and com-
ment on anything observed.
Based on the participant’s com-
ments, there were 38 images that did not belong to any of the
five classes because of lack of relevance of the image contents
with the labels.
These 38 images include phone numbers,
face images, group photos, and other irrelevant images.
Out
of the 202 remaining images,
according to the participant,
149 images were labeled correctly (73.76%).
Our observa-
tion from this study was that the CNN model did not per-
form as good when attempting to distinguish between in-
side and outside labels,
particularly in dark settings.
We
proceed with the results obtained from GoogLeNet because
this model
provides a decent level
of
accuracy on average
and is compatible with the neural image caption generator.
5.2
Image captioning
The NIC generator has several hyperparameters that can
affect the quality of
the resulting captions:
maximum se-
quence length (max_seq_len),
batch size (batch_sz),
em-
bedding size (embedding_sz),
learning rate (lr),
and num-
0.0001
0.001
0.01
0.8
0.7
0.6
0.5
0.4
0.3
0.2
Learning rate
Confidence median + BLEU-4 score
128
256
512
768
1024
size
Embedding
Figure 5:
Effect of embedding size and learning rate set-
tings on quality of NIC generator.
23
18
13
9
0.85
0.80
0.75
0.70
0.65
0.60
0.55
0.50
Sequence length
Confidence median + BLEU-4 score
50
100
200
size
Batch
Figure 6:
Effect of sequence length and batch size settings
on quality of NIC generator.
ber of
iterations (iters).
To select the hyperparameters
that resulted in the best confidence and BLEU-4 score,
we
created an initial suite of experiments setting max_seq_len
to 6, batch_sz to 50 and iters to 20,000.
Figure 5 depicts
the results of setting embedding_sz to {128,
256,
512,
768,
1024} and lr to {0.01, 0.001, 0.0001}.
The Y-axis represents
the maximum value,
across the iterations of one model,
of
adding the median of the confidence scores for all
the gen-
erated sentences to the corpus-level
BLEU-4 score.
Thus,
the hypothetical
maximum value in this dimension is 2.0.
In this case,
it is clear that the optimal
result is obtained
when embedding_sz is 1,024 and lr is 0.001.
Using these values, we now create a new experiment to ob-
tain the locally optimal values for max_seq_len and batch_sz,
setting them to {6,
10,
15,
20} and {50,
100,
200},
respec-
tively,
while embedding_sz is set to 1,024,
iters to 20,000
and lr to 0.001.
The results are shown in Figure 6,
which
indicate that the optimal
maximum sequence length is 13
and the optimal batch size is 100.
The BLEU-1 score obtained by our corpus of
generated
captions is 12.5%,
while the BLEU-4 score is 6.9%.
The
latter value is significantly lower than that obtained using
the Microsoft COCO dataset [26], 27.7%.
This could be ex-
plained by the low quality of many of the captions used.
Un-
conventional style and colloquial language in captions effect
90%
80%
70%
60%
50%
40%
30%
20%
10%
0%
70%
60%
50%
40%
30%
20%
10%
0%
Minimum confidence score threshold
BLEU-n score
BLEU-1
BLEU-2
BLEU-3
BLEU-4
Figure 7:
BLEU-n scores for samples above a confidence
threshold.
Table 4:
Results of evaluation of generated image captions.
Evaluator
Min
Max
Avg
Median
Participant 1
1
10
6.29
6
Participant 2
1
10
5.01
4
Participant 3
1
10
4.92
3
Participant 4
1
10
5.61
6
Participant 5
1
10
6.40
8
the BLEU score because this score is highly dependent on
the sequence of selected words.
We use a confidence score,
as described in Section 4,
to measure the strength of
each
BLEU value.
This allows us to isolate high quality BLEU
scores.
Figure 7 shows how the BLEU-n scores change with
increasing confidence score of the captions.
For each point
in the figure, we compute the BLEU-n score using only the
samples that have a confidence score greater than the value
on the X-axis.
The generated captions exhibit a confidence
level higher than 95% to obtain a corpus-level BLEU-1 score
of 70% and a BLEU-4 score of 45%.
Evaluation using BLEU-
1 score is more appropriate for this study given that captions
are generally small and frequent larger-grams are scarce.
5.3
Caption evaluation
To qualitatively evaluate the generated captions, we asked
five participants to manually assign a score to each gener-
ated caption for one hundred images.
For each image,
we
presented the participant with five captions generated by
the NIC generator (or less, if there were repetitions).
Each
set of captions was evaluated using a score on a scale of 1 to
10, with 10 meaning that all five captions have terms related
to the image and 1 meaning that no caption has any term
related to the image.
As a baseline,
the participants were
asked to rate an image captioning with a score of 2 if only
one caption out of
five contained exactly one term related
to the image.
The one hundred images used for this evaluation are the
first hundred images that appear in our website
2
.
This sub-
set of images contains 40 images labeled by our CNN pre-
dictor as food,
17 images labeled as drink,
16 images as
outside,
14 images as menu,
and 13 images labeled as in-
side.
Table 4 presents a summary of the scores provided by each
of the participants.
In general, the average of these scores is
5.646, and the median is 6 which indicates that, on average,
at least half
of
the captions generated for an image have
some terms related to the image content.
Based on an over-
all calculation of all the scores provided by all participants,
73.2% of the images have a score of 3 or higher.
This indi-
cates that 73.2% of the images have at least one predicted
caption containing terms related to the image.
This result
demonstrates high quality prediction given that there can
be a tremendous amount of possible word combinations for
captioning.
5.4
Topic modeling
The Gensim implementation [29]
of
Latent Dirichlet Al-
location used in our framework has the following parame-
ters:
number of
topics (n_topics),
words per topic,
itera-
tions(iters),
α,
η,
κ and τ
0
.
For all
of
the experiments,
we used the ten top words for each topic.
As mentioned in
Section 4, lower perplexity is expected in a better model.
In
Figure 8,
we show the effect of
setting κ to {0.5,
0.6,
0.7,
2
Available at:
https://auto-captioning.herokuapp.com
1.0
0.9
0.8
0.7
0.6
0.5
375
350
325
300
275
250
κ
Perplexity
1
64
256
1024
τ0
Figure 8:
Effect of κ and τ
0
settings on LDA model
per-
plexity.
0.8, 0.9, 1.0} and τ
0
to {1, 64, 256, 1024} on the perplexity
of the LDA model, while both α and η are set to symmetric,
n_topics is 20, and iters is 50.
The results show that the
locally optimal values for κ and τ
0
are 0.5 and 1, respectively.
Using these values for κ and τ
0
,
we test changing α be-
tween {‘symmetric’,
‘asymmetric’,
‘auto’} and η between
{‘symmetric’,
‘auto’},
while the other hyperparameters re-
main the same.
Figure 9 presents the effect of changing these
variables,
where the optimal
values for α and η are ‘auto’
and ‘symmetric’, respectively.
Finally,
we test setting n_topics to {20,
50,
100} and
iters to {50,
100,
150},
while the other hyperparameters
remain the same.
Figure 10 presents the effect of changing
these variables, where the optimal values for n_topics and
iters are 20 and 150, respectively.
In this section we have shown that certain hyperparame-
ters, such as κ and τ
0
, can have a significant impact on the
perplexity of
the model.
Our observation is that choosing
the wrong values for κ and τ
0
may result in a 1.45 times
increase in perplexity,
while a modification of α and η can
result in a 1.2 times increase in perplexity.
Changes in the
number of topics and iterations demonstrate a 1.1 times in-
crease in perplexity.
Thus,
a careful
optimization of
these
parameters is required to obtain the optimal LDA model in
terms of perplexity.
asymmetric
auto
symmetric
260
255
250
245
240
235
230
α
Perplexity
symmetric
auto
η
Figure 9:
Effect of
α and η settings on LDA model
per-
plexity.
100
50
20
290
280
270
260
250
240
230
Topics
Perplexity
50
100
150
Iterations
Figure 10:
Effect of n_topics and iters settings on LDA
model perplexity.
5.5
Recommending images for reviews
In this subsection, we describe a few review-to-image rec-
ommendations obtained by our framework.
We provided a
sample in Figure 1 of
Section 1 that illustrates that our
framework was able to recommend relevant images for a
review on a burger-meal.
Another review,
its top topical
words,
and recommended images are shown in Figure 11.
The review was taken from Yelp’s entry for the Mon Ami
Gabi restaurant in Las Vegas.
This example shows that the
recommended set contains the images of the fountains of the
Bellagio hotel across the street as described in the review.
Summaries of five more reviews with the top three recom-
mended images for each are provided in Table 5.
The table
shows that our framework is able to recommend images of
main dishes, as well as outside features such as the Bellagio
Review: We sat on the patio which sits facing the Bella-
gio.
We didn’t eat until almost 8PM, the fountains where
putting on their show every 15 minutes giving it a little ex-
tra to the atmosphere...
If you go, and the weather is right,
I would recommend sitting on the Patio.
The combination
of the fountains, the decor and being able to watch people
walking up and down the strip made for a fun evening.
Top topical
words:
patio,
bellagio,
fountains,
patio,
fountains.
Figure 11:
Some of the recommended photos for a review
of the Mon Ami Gabi restaurant.
Table 5:
Examples of suggested images for reviews of Mon
Ami Gabi at Las Vegas.
Review summary
Suggested images
...bread that they
serve...recommended
the french onion
soup...
...see the Bellagio
fountain
show...reminiscent of
Paris...
...Paris Hotel...who
loves Paris...front
seat row to the
Bellagio light show...
...not on the menu...
smoked salmon, egg
and jack cheese...
Crepes were...
...rave about the
fabulous Bellagio
fountains...traditional
French menu...
fountains, which are relevant to the reviews.
Recommended
images for a few thousand reviews of
the Mon Ami
Gabi
restaurant are provided in our website
3
.
6.
RELATED WORK
Yelp introduced images in the Yelp Challenge recently.
To the best of our knowledge, no previous publications have
focused on enhancing Yelp reviews by recommending related
images.
The literature associated with the tasks involved in
this paper is described below.
The problem of image classification has been studied for at
least half a century, with initial approaches focusing on man-
ual extraction of textural features [15].
Due to the difficulty
of manual
feature extraction,
several
automatic algorithms
have been developed including histogram-based SVM clas-
sification [5], as well as pyramid matching with sparse cod-
ing [37]
and locality-constrained linear coding [36].
Other
methods use a bag-of-features approach, followed by a clas-
sifier such as SVM [7].
Recently,
there has been a lot of
interest in deep neu-
ral
networks.
In the area of
image classification,
a surge
has been observed in convolutional neural networks (CNNs).
CNNs are neural networks formed by three different types of
layers:
convolutional layers, pooling layers and fully-connected
layers.
These layers can be stacked in many different ways,
and research is advancing in the direction of
deeper net-
works.
Some of
the most
relevant
CNN models
include
AlexNet [20], VGG [31], GoogLeNet [33] and ResNet [16].
The image captioning algorithm used in this paper, based
on the work by Vinyals, et al. [35], combines a Convolutional
Neural
Network (CNN) with a special
form of a Recurrent
Neural
Network (RNN)
called Long Short-Term Memory
(LSTM). Alternatives to using LSTM include primitive rule-
3
https://auto-captioning.herokuapp.com/reviewSuggest.
html
Based systems [13,
38]
or object detection combined with
templates [12,
25,
21]
or Language Models [27,
1,
22,
23,
11] for caption generation.
These are heavily hand-designed
alternatives and would be too laborious to implement.
An-
other alternative method for captioning and ranking of these
captions is co-embedding images and text in the same vector
space [32].
Topic modeling has also been widely used in text mining
in the past decade.
Of particular interest are latent semantic
indexing (LSI) [8]
and probabilistic LSI (pLSI) [18],
which
map documents to a latent semantic space.
Latent Dirich-
let Allocation (LDA) [4],
which is used in this work,
is a
probabilistic approach that generalizes pLSI.
Variations of
this algorithm include dynamic topic modeling [3]
and on-
line LDA [2].
Neural networks have also been used for topic
modeling [24, 30].
7.
CONCLUSIONS
The framework we designed to enhance Yelp reviews by
recommending images requires no supervision.
The training
samples are gathered from the existing information pieces
available with the data.
A part of the proposed methodology
focuses on enhancing and improving the existing data by
providing additional
information,
i.e.,
categorizing images
and predicting caption-words for them.
One of
the future
directions of
this work is to provide further enhancements
through the use of
multi-label
classification where existing
caption-words will
be used as labels.
Another future goal
is to develop models to track the performance of a business
and the sentiment detected in review and caption texts.
8.
REFERENCES
[1]
A. Aker and R. Gaizauskas. Generating image
descriptions using dependency relational patterns. In
Proc. 48th Annu. Meeting Assoc. Comput. Ling.,
pages 1250–1258. ACL, 2010.
[2]
L. AlSumait, D. Barbar´a, and C. Domeniconi. On-line
LDA: Adaptive topic models for mining text streams
with applications to topic detection and tracking. In
Proc. 8th IEEE Int. Conf. Data Mining, pages 3–12.
IEEE, Dec 2008.
[3]
D. M. Blei and J. D. Lafferty. Dynamic topic models.
In Proc. 23rd Int. Conf. Mach. Learn., pages 113–120.
ACM, 2006.
[4]
D. M. Blei, A. Y. Ng, and M. I. Jordan. Latent
Dirichlet allocation. J. Mach. Learn. Res., 3:993–1022,
Mar. 2003.
[5]
O. Chapelle, P. Haffner, and V. N. Vapnik. Support
vector machines for histogram-based image
classification. IEEE Trans. Neural
Netw.,
10(5):1055–1064, Sep 1999.
[6]
F. Chollet. Keras. https://github.com/fchollet/keras,
2016.
[7]
G. Csurka, C. Dance, L. Fan, J. Willamowski, and
C. Bray. Visual categorization with bags of keypoints.
In Workshop on Statistical
Learn. in Comp. Vision,
volume 1, pages 1–2. Prague, 2004.
[8]
S. C. Deerwester, S. T. Dumais, T. K. Landauer,
G. W. Furnas, and R. A. Harshman. Indexing by
latent semantic analysis. JASIS, 41(6):391–407, 1990.
[9]
J. Deng, W. Dong, R. Socher, L.-J. Li, K. Li, and
L. Fei-Fei. Imagenet:
A large-scale hierarchical image
database. In Proc. IEEE Conf. Comp. Vision and
Pattern Recognition, pages 248–255. IEEE, 2009.
[10]
S. Dieleman, J. Schl
¨
uter, C. Raffel, E. Olson,
S. Sønderby, D. Nouri, D. Maturana, M. Thoma,
E. Battenberg, J. Kelly, et al. Lasagne:
First release.
Zenodo:
Geneva, Switzerland, 2015.
[11]
D. Elliott and F. Keller. Image description using
visual dependency representations. In Proc. Conf.
Empirical
Methods Natural
Language Processing,
pages 1292–1302. ACL, 2013.
[12]
A. Farhadi, M. Hejrati, M. A. Sadeghi, P. Young,
C. Rashtchian, J. Hockenmaier, and D. Forsyth. Every
picture tells a story:
Generating sentences from
images. In Proc. 11th European Conf. Comp. Vision,
pages 15–29. Springer, 2010.
[13]
R. Gerber and H.-H. Nagel. Knowledge representation
for the generation of quantified natural language
descriptions of vehicle traffic in image sequences. In
Proc. Int. Conf. Image Processing, volume 1, pages
805–808. IEEE, 1996.
[14]
A. Graves and J. Schmidhuber. Framewise phoneme
classification with bidirectional LSTM and other
neural network architectures. Neural
Networks,
18(5):602–610, 2005.
[15]
R. M. Haralick, K. Shanmugam, and I. Dinstein.
Textural features for image classification. IEEE Trans.
Syst. Man Cybern., SMC-3(6):610–621, Nov 1973.
[16]
K. He, X. Zhang, S. Ren, and J. Sun. Deep residual
learning for image recognition. CoRR, abs/1512.03385,
2015.
[17]
M. Hoffman, F. R. Bach, and D. M. Blei. Online
learning for latent Dirichlet allocation. In Advances in
Neural
Information Processing Systems 23, pages
856–864. Curran Associates, Inc., 2010.
[18]
T. Hofmann. Probabilistic latent semantic indexing. In
Proc. 22nd Annu. Int. ACM SIGIR Conf. Res. Devel.
Info. Retrieval, SIGIR ’99, pages 50–57, New York,
NY, USA, 1999. ACM.
[19]
K. Karvonen, T. Kilinkaridis, and O. Immonen.
Widsets:
A usability study of widget sharing. In Proc.
Int. Conf. Human-Computer Interaction, volume 5727,
pages 461–464. Springer, 2009.
[20]
A. Krizhevsky, I. Sutskever, and G. E. Hinton.
Imagenet classification with deep convolutional neural
networks. In Advances in Neural
Information
Processing Systems 25, pages 1097–1105. Curran
Associates, Inc., 2012.
[21]
G. Kulkarni, V. Premraj, V. Ordonez, S. Dhar, S. Li,
Y. Choi, A. C. Berg, and T. Berg. Babytalk:
Understanding and generating simple image
descriptions. IEEE Trans. Pattern Anal. Mach. Intell.,
35(12):2891–2903, 2013.
[22]
P. Kuznetsova, V. Ordonez, A. C. Berg, T. L. Berg,
and Y. Choi. Collective generation of natural image
descriptions. In Proc. 50th Annu. Meeting Assoc.
Comp. Ling.:
Long Papers-Volume 1, pages 359–368.
ACL, 2012.
[23]
P. Kuznetsova, V. Ordonez, T. L. Berg, and Y. Choi.
Treetalk:
Composition and compression of trees for
image descriptions. Trans. ACL, 2(10):351–362, 2014.
[24]
H. Larochelle and S. Lauly. A neural autoregressive
topic model. In Advances in Neural
Information
Processing Systems 25, pages 2708–2716. Curran
Associates, Inc., 2012.
[25]
S. Li, G. Kulkarni, T. L. Berg, A. C. Berg, and
Y. Choi. Composing simple image descriptions using
web-scale n-grams. In Proc. 15th Conf. Comp. Natural
Language Learn., pages 220–228. ACL, 2011.
[26]
T.-Y. Lin, M. Maire, S. Belongie, J. Hays, P. Perona,
D. Ramanan, P. Doll´
ar, and C. L. Zitnick. Microsoft
coco:
Common objects in context. In Proc. 15th
European Conf. Comp. Vision, pages 740–755.
Springer, 2014.
[27]
M. Mitchell, X. Han, J. Dodge, A. Mensch, A. Goyal,
A. Berg, K. Yamaguchi, T. Berg, K. Stratos, and
H. Daum´e III. Midge:
Generating image descriptions
from computer vision detections. In Proc. 13th Conf.
European Chapter Assoc. Comp. Ling., pages 747–756.
ACL, 2012.
[28]
K. Papineni, S. Roukos, T. Ward, and W.-J. Zhu.
BLEU: a method for automatic evaluation of machine
translation. In Proc. of the 40th Annu. Meeting on
Assoc. for Comp. Ling., pages 311–318. ACL, 2002.
[29]
R.
ˇ
Reh˚uˇrek and P. Sojka. Software Framework for
Topic Modelling with Large Corpora. In Proceedings
of the LREC 2010 Workshop on New Challenges for
NLP Frameworks, pages 45–50, Valletta, Malta, May
2010. ELRA.
[30]
D. Shamanta, S. M. Naim, P. Saraf, N. Ramakrishnan,
and M. S. Hossain. Concurrent Inference of Topic
Models and Distributed Vector Representations, pages
441–457. Springer International Publishing, Cham,
2015.
[31]
K. Simonyan and A. Zisserman. Very deep
convolutional networks for large-scale image
recognition. CoRR, abs/1409.1556, 2014.
[32]
R. Socher, A. Karpathy, Q. V. Le, C. D. Manning,
and A. Y. Ng. Grounded compositional semantics for
finding and describing images with sentences. Trans.
ACL, 2:207–218, 2014.
[33]
C. Szegedy, W. Liu, Y. Jia, P. Sermanet, S. Reed,
D. Anguelov, D. Erhan, V. Vanhoucke, and
A. Rabinovich. Going deeper with convolutions. In
Proc. IEEE Conf. Comp. Vision and Pattern
Recognition, pages 1–9. IEEE, 2015.
[34]
Theano Development Team. Theano:
A Python
framework for fast computation of mathematical
expressions. arXiv e-prints, abs/1605.02688, May
2016.
[35]
O. Vinyals, A. Toshev, S. Bengio, and D. Erhan. Show
and tell:
A neural image caption generator. In Proc.
IEEE Conf. Comp. Vision and Pattern Recognition,
pages 3156–3164. IEEE, 2015.
[36]
J. Wang, J. Yang, K. Yu, F. Lv, T. Huang, and
Y. Gong. Locality-constrained linear coding for image
classification. In Proc. IEEE Conf. Comp. Vision and
Pattern Recognition, pages 3360–3367. IEEE, June
2010.
[37]
J. Yang, K. Yu, Y. Gong, and T. Huang. Linear
spatial pyramid matching using sparse coding for
image classification. In Proc. IEEE Conf. Comp.
Vision and Pattern Recognition, pages 1794–1801.
IEEE, June 2009.
[38]
B. Z. Yao, X. Yang, L. Lin, M. W. Lee, and S. C. Zhu.
I2T: image parsing to text description. Proc. IEEE,
98(8):1485–1508, 2010.
[39]
Yelp. Yelp dataset challenge.
https://www.yelp.com/dataset
challenge, 2016.
