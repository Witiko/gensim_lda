Dueling Bandits with Weak Regret
Bangrui Chen
1
Peter I. Frazier
1
Abstract
We consider online content recommendation with
implicit feedback through pairwise comparisons,
formalized as the so-called dueling bandit prob-
lem.
We study the dueling bandit
problem in
the Condorcet winner setting, and consider two
notions of regret:
the more well-studied strong
regret, which is 0 only when both arms pulled are
the Condorcet winner; and the less well-studied
weak regret, which is 0 if either arm pulled is the
Condorcet winner. We propose a new algorithm
for this problem, Winner Stays (WS), with varia-
tions for each kind of regret: WS for weak regret
(WS-W) has expected cumulative weak regret that
is
O(N
2
)
, and
O(N log(N ))
if arms have a total
order; WS for strong regret (WS-S) has expected
cumulative strong regret of
O(N
2
+ N log(T ))
,
and
O(N log(N ) + N log(T ))
if arms have a to-
tal order.
WS-W is the first dueling bandit algo-
rithm with weak regret that is constant in time.
WS is simple to compute, even for problems with
many arms, and we demonstrate through numer-
ical experiments on simulated and real data that
WS has significantly smaller regret than existing
algorithms in both the weak- and strong-regret
settings.
1. Introduction
We consider bandit learning in personalized content recom-
mendation with implicit pairwise comparisons.
We offer
pairs of items to a user and record implicit feedback on
which offered item is preferred, seeking to learn the user’s
preferences over items quickly, while also ensuring that the
fraction of time we fail to offer a high-quality item is small.
Implicit pairwise comparisons avoid the inaccuracy of user
ratings (Joachims et al., 2007) and the difficulty of engaging
users in providing explicit feedback.
1
Cornell University, Ithaca, NY. Correspondence to:
Peter I.
Frazier <pf98@cornell.edu>.
Proceedings of the
34
th
International Conference on Machine
Learning, Sydney, Australia, PMLR 70, 2017. Copyright 2017 by
the author(s).
We study a model for this setting called the dueling bandit
problem (Yue & Joachims, 2009). The items we may offer
to the user are called “arms”, and we learn about these arms
through a sequence of “duels”. In each duel, we “pull” two
arms and receive noisy feedback from the user telling us
which arm is preferred. When an arm is preferred within a
duel, we say that the arm has “won the duel".
We study this problem in the Condorcet winner setting, in
which we assume the existence of an arm (the Condorcet
winner) that wins with probability at least
1
2
when paired
with any of the other arms.
In these settings, we consider
two notions of regret:
“weak regret“,
in which we avoid
regret by selecting the Condorcet winner as either arm in the
duel; and “strong-regret”, in which we can only avoid regret
by setting both arms in the duel to the Condorcet winner.
Weak regret was proposed by Yue et al. (2012) and arises
in content recommendation when arms correspond to items,
and the user incurs no regret whenever his most preferred
item is made available. Examples include in-app restaurant
recommendations provided by food delivery services like
Grubhub and UberEATS, in which implicit feedback may
be inferred from selections, and the user only incurs regret
if her most preferred restaurant is not recommended. Exam-
ples also include recommendation of online broadcasters on
platforms such as Twitch, in which implicit feedback may
again be inferred from selections, and the user is fully satis-
fied as long as her favored broadcaster is listed. Despite its
applicability, Yue et al. (2012) is the only paper of which we
are aware that studies weak regret, and it does not provide
algorithms specifically designed for this setting.
Strong regret has been more widely studied, as discussed
below, and has application to choosing ranking algorithms
for search (Hofmann et al., 2013). To perform a duel, query
results from two rankers are interleaved (Radlinski et al.,
2008),
and the ranking algorithm that
provided the first
result chosen by the user is declared the winner of the duel.
Strong regret is appropriate in this setting because the user’s
experience is enhanced by pulling the best arm twice, so
that all of that ranker’s results are shown.
Our contribution is a new algorithm, Winner Stays (WS),
with variants designed for the weak (WS-W) and strong
regret (WS-S) settings. We prove that WS-W has expected
cumulative weak regret that is constant in time,
with de-
arXiv:1706.04304v1 [cs.LG] 14 Jun 2017
Submission and Formatting Instructions for ICML 2017
pendence on the number of arms
N
given by
O(N
2
)
.
If
the arms have a total order,
we show a tighter bound of
O(N log N)
. We then prove that WS-S has expected cumu-
lative strong regret that is
O(N
2
+ N log(T ))
, and prove
that a tighter bound of
O(N log(N ) + N log(T ))
holds if
arms have a total order.
These regret bounds are optimal
in
T
, and for weak regret are strictly better than those for
any previously proposed algorithm, although at the same
time both strong and weak regret bounds are sensitive to
the minimum gap in winning probability between arms. We
demonstrate through numerical experiments on simulated
and real data that WS-W and WS-S significantly outperform
existing algorithms on strong and weak regret.
The paper is structured as follows. Section 2 reviews related
work.
Section 3 formulates our problem.
Section 4 intro-
duces the Winner Stays (WS) algorithm: Section 4.1 defines
WS-W for the weak regret setting; Section 4.2 proves that
WS-W has cumulative expected regret that is constant in
time; Section 4.3 defines WS-S for the strong regret setting
and bounds its regret.
Section 4.4 disusses a simple ex-
tension of our theoretical results to the utility-based bandit
setting, which is used in our numerical experiments.
Sec-
tion 5 compares WS with three benchmark algorithms using
both simulated and real datasets, finding that WS outper-
forms these benchmarks on the problems considered.
2. Related Work
Most work on dueling bandits focuses on strong regret. Yue
et al. (2012) shows that the worst-case expected cumulative
strong regret up to time T for any algorithm is
Ω(N log(T ))
.
Algorithms have been proposed that reach this lower bound
under the Condorcet winner assumption in the finite-horizon
setting: Interleaved Filter (IF) (Yue et al., 2012) and Beat
the Mean (BTM) (Yue & Joachims, 2011).
Relative Up-
per Confidence Bound (RUCB) (Zoghi et al., 2014) also
reaches this lower bound in the horizonless setting.
Rela-
tive Minimum Empirical Divergence (RMED) (Komiyama
et al., 2015) is the first algorithm to have a regret bound that
matches this lower bound. Zoghi et al. (2015) proposed two
algorithms, Copeland Confidence Bound (CCB) and Scal-
able Copeland Bandits (SCB), which achieve an optimal
regret bound without assuming existence of a Condorcet
winner.
While weak regret was proposed in Yue et al. (2012), it has
not been widely studied to our knowledge, and despite its
applicability we are unaware of papers that provide algo-
rithms designed for it specifically.
While one can apply
algorithms designed for the strong regret setting to weak
regret, and use the fact that strong dominates weak regret to
obtain weak regret bounds of
O(N log(T ))
, these are looser
than the constant-in-
T
bounds that we show.
Active learning using pairwise comparisons is also closely
related to our work.
Jamieson & Nowak (2011) considers
an active learning problem that is similar to our problem in
that the primary goal is to sort arms based on the user’s pref-
erences, using adaptive pairwise comparisons. It proposes
a novel algorithm, the Query Selection Algorithm (QSA),
that uses an expected number of operations of
d log(N )
to
sort
N
arms, where
d
is the dimension of the space in which
the arms are embedded, rather than
N log(N )
. Busa-Fekete
et al.
(2013) and Busa-Fekete et al.
(2014) consider top-
k element selection using adaptive pairwise comparisons.
They propose a generalized racing algorithm focusing on
minimizing sample complexity. (Pallone et al., 2017) stud-
ies adaptive preference learning across arms using pairwise
preferences.
They show that a greedy algorithm is Bayes-
optimal for an entropy objective. While similar in that they
use pairwise comparisons, these algorithms are different in
focus from the current work because they do not consider
cumulative regret.
3. Problem Formulation
We consider
N
items (arms).
At each time
t = 1, 2, . . .
,
the system chooses two items and shows them to the user,
i.e.,
the system performs a duel between two arms.
The
user then provides binary feedback indicating her preferred
item,
determining which arm wins the duel.
This binary
feedback is random, and is conditionally independent of all
past interactions given the pair of arms shown. We let
p
i,j
denote the probability that the user gives feedback indicating
a preference for arm
i
, when shown arms
i
and
j
. If the user
prefers arm
i
over arm
j
, we assume
p
i,j
> 0.5
.
We also
assume symmetry:
p
i,j
= 1 − p
j,i
.
We assume arm
1
is a Condorcet winner, i.e., that
p
1,i
> 0.5
for
i = 2, · · · , N
.
In some results,
we also consider the
setting in which arms have a total order, by which we mean
that the arms are ordered so that
p
i,j
> 0.5
for all
i < j
.
The total order assumption implies transitivity.
We let
p = min
p
i,j
>0.5
p
i,j
> 0.5
be a lower bound on the
probability that the user will choose her favourite arm.
We consider both weak and strong regret in its binary form.
The single-period weak regret incurred at this time is
r(t) =
1
if we do not pull the best arm and
r(t) = 0
otherwise.
The single-period strong regret is
r(t) = 1
if we do not
pull the best arm twice and
r(t) = 0
otherwise.
We also
consider utility-based extensions of weak and strong regret
in Section 4.4.
We use the same notation
r(t)
to denote strong and weak
regret, and rely on context to distinguish the two cases. In
both cases, we define the cumulative regret up to time
T
to be
R(T ) =
P
T
t=1
r(t)
.
We measure the quality of an
algorithm by its expected cumulative regret.
Submission and Formatting Instructions for ICML 2017
4. Winner Stays
We now propose an algorithm, called Winner Stays (WS),
with two variants:
WS-W designed for weak regret; and
WS-S for strong regret.
Section 4.1 introduces WS-W
and illustrates its dynamics.
Section 4.2 proves the ex-
pected cumulative weak regret
of WS-W is
O(N
2
)
un-
der the Condorcet winner setting,
and
O(N log(N ))
un-
der the total order setting.
Section 4.3 introduces WS-S
and proves that
its expected cumulative strong regret
is
O(N
2
+ N log(T ))
under the Condorcet winner setting,
and
O(N log(T ) + N log(N ))
under the total order setting,
both of which have optimal dependence on
T
. Section 4.4
extends our theoretical results to utility-based bandits.
4.1. Winner Stays with Weak Regret (WS-W)
We now present WS-W, first defining some notation.
Let
q
i,j
(t)
be the number of times that arm
i
has defeated arm
j
in a duel, up to and including time
t
. Then, define
C(t, i) =
P
j6=i
q
i,j
(t) − q
j,i
(t)
.
C(t, i)
is the difference between the
number of duels won and lost by arm
i
, up to time
t
. With
this notation, we define WS-W in Algorithm 1.
Algorithm 1 WS-W
Input: arms
1, · · · , N
for
t = 1, 2, · · ·
do
Step 1: Pick
i
t
= arg max
i
C(t−1, i)
, breaking ties as
follows:
•
If
t > 1
and
i
t−1
∈ arg max
i
C(t−1, i)
, set
i
t
= i
t−1
.
•
Else if
t
> 1
and
j
t−1
∈ arg max
i
C(t − 1, i)
,
set
i
t
= j
t−1
.
•
Else
choose
i
t
uniformly
at
random from
arg max
i
C(t − 1, i)
.
Step 2: Pick
j
t
=arg max
j6=i
t
C(t−1, j)
, breaking ties
as follows:
•
If
t > 1
and
i
t−1
∈ arg max
i6=i
t
C(t − 1, i) \ {i
t
}
,
set
j
t
= i
t−1
.
•
Else if
t > 1
and
j
t−1
∈ arg max
i6=i
t
C(t−1, i)\{i
t
}
,
set
j
t
= j
t−1
.
•
Else
choose
j
t
uniformly
at
random from
arg max
j
C(t − 1, j) \ {i
t
}
.
Step 3: Pull arms
i
t
and
j
t
;
Step 4:
Observe noisy binary feedback and update
C(t, i
t
)
and
C(t, j
t
)
;
end
WS-W’s pulls can be organized into iterations,
each of
which consists of a sequence of pulls of the same pair of
arms, and rounds, each of which consists of a sequence of
iterations in which arms that lose an iteration are not visited
again until the next round. We first describe iterations and
rounds informally with an example and in Figure 1 before
presenting our formal analysis.
Example
: At time
t = 1
,
C(0, i) = 0
for all
i
, and WS-W
pulls two randomly chosen arms.
Suppose it pulls arms
i
1
= 1
,
j
1
= 2
and arm
1
wins.
Then
C(1, i)
is 1 for arm
1,
−1
for arm 2, and
0
for the other arms. This first pull is
an iteration of length 1, arm
1
is the winner, and arm
2
is
the loser. This iteration is in the first round. We call
t
1
= 1
the start of the first round, and
t
1,1
= 1
the start of the first
iteration in the first round.
At time
t = 2
,
C(t − 1, i)
is largest for arm
1
so WS-W
chooses
i
2
= 1
.
Since
C(t − 1, i)
is
−1
for arm 2 and 0
for the other arms, WS-W chooses
j
2
at random from arms
3 through
N
(suppose
N > 2
).
Suppose it chooses arm
j
2
= 3
. This pair of arms (1 and 3) is different from the pair
pulled in the previous iteration (1 and 2), so
t
1,2
= 2
is the
start of the second iteration (in the first round).
WS-W continues pulling arms 1 and 3 until
C(t, i)
is
−1
for one of these arms and
2
for the other. WS-W continues
to pull only arms 1 and 3 until one has
C(t, i) = 2
even
though this may involve times when
C(t, i)
is 0 for both
arms 1 and 3, causing them to be tied with arms 4 and above,
because we break ties to prioritize pulling previously pulled
arms. The sequence of times when we pull arms 1 and 3 is
the second iteration.
The arm that ends the iteration with
C(t, i) = 2
is the winner of that iteration.
WS-W continues this process, performing
N − 1
iterations
on different pairs of arms, pitting the winner of each iteration
against a previously unplayed arm in the next iteration. This
sequence of iterations is the first
round.
The winner of
the final iteration in the first round, call it arm
Z(1)
, has
C(t, Z(1)) = N − 1
and all
other arms
j 6= Z(1)
have
C(t, j) = −1
.
The second round begins on the next pull after the end of
the first round,
at time
t
2
.
WS-W again performs
N − 1
iterations, playing
Z(1)
in the first iteration. Each iteration
has a winner that passes to the next iteration.
WS-W repeats this process for an infinite number of rounds.
Each round is a sequence of
N −1
iterations, and an arm
that loses an iteration is not revisited until the next round.
Figure 1 illustrates these dynamics, and we formalize the
definition of round and iteration in the next section.
4.2. Analysis of WS-W
In this section, we analyze the weak regret of WS-W. After
presenting definitions and preliminary results,
we prove
WS-W has expected cumulative weak regret bounded by
O(N log(N ))
when arms have a total order.
Then, in the
more general Condorcet winner setting, we prove WS-W
has expected cumulative weak regret bounded by
O(N
2
)
.
We leave the proofs of all lemmas to the supplement.
We define
t
`
, the beginning of round
`
, and
Z(` − 1)
, the
Submission and Formatting Instructions for ICML 2017
Figure 1.
Our analysis of WS-W decomposes its behavior into a sequence of rounds. In each round, pairs of arms play each other in a
sequence of iterations. The winner from an iteration passes on to play a new arm in the next iteration randomly selected from those that
have not yet played in the round. At the end of a round, the round’s winner is considered first in the next round.
winner of round
`
, as the unique time and arm such
C(t
`
−
1, Z(` − 1)) = (N − 1)(` − 1)
and
C(t
`
− 1, i) = −` + 1
for all
i 6= Z(` − 1)
.
We define
t
`,k
, the beginning of iteration
k
in round
`
, as
the first time we pull the
k
th
unique pair of arms in the
`
th
round. We let
T
`,k
be the number of successive pulls of this
pair of arms.
We additionally define terminology to describe arms pulled
in an iteration.
In a duel between arms
i
and
j
with
p
i,j
>
0.5
, arm
i
is called the better arm and arm
j
is called the
worse arm. We say that an arm
i
is the incumbent in iteration
k
iteration and round
`
if
C(t
`,k
−1,i) > 0
.
A unique such
arm exists except when
` = k = 1
.
When
` = k = 1
,
the incumbent is the better of the two arms being played.
We call the arm being played that is not the incumbent the
challenger.
Using these definitions, we present our first pair of results
toward bounding the expected cumulative weak regret of
WS-W. They bound the number of pulls in an iteration.
Lemma 1.
The conditional expected length of iteration
k
in round
`
, given the arms being pulled, is bounded above
by
N(`−1)+k
2p−1
if the incumbent is worse than the challenger,
and by
1
2p−1
if the incumbent is better than the challenger.
Lemma 1 shows that iterations with a worse incumbent use
more pulls. We then bound the number of iterations with a
worse incumbent.
Lemma 2.
Under the total order assumption,
the condi-
tional expected number of future iterations with an incum-
bent worse than the challenger, given history up to time
t
`,k
,
is bounded above by
2p
2
(2p−1)
3
(log(N ) + 1)
for any
k, ` ≥ 1
.
Lemma 2 implies that the incumbent is worse than the chal-
lenger in finitely many iterations with probability
1
.
We
now bound the tail distribution of the last such round.
Lemma 3.
Let
L
denote the smallest
`
such that no round
`
0
> `
contains an iteration in which the incumbent is worse
than the challenger. Then
P (L ≥ `) ≤

1−p
p

`
.
To present our final set of preliminary lemmas, we define
several indicator functions.
Let
B(`, k)
be
1
when the in-
cumbent in iteration
k
of round
`
is better than the chal-
lenger.
Let
D(`)
be
1
if arm 1 (the best
arm) is the in-
cumbent at the beginning of iteration 1 of round
`
. Denote
¯
B(`, k) = 1 − B(`, k)
and
¯
D(`) = 1 − D(`)
.
Let
V (`, k)
be
1
if
D(`) = 1
and arm
1
loses in any iteration
1
through
k − 1
of round
`
.
We may only incur weak regret during round
`
iteration
k
if
¯
D(`) = 1
, or if
V (`, k
0
) = 1
for some
k
0
< k
.
We will
separately bound the regret incurred in these two different
scenarios.
Moreover,
our bound on the number of pulls,
and thus the regret incurred, in this iteration will depend on
whether
B(`, k) = 1
or
¯
B(`, k) = 1
. This leads us to state
four inequalities in the following pair of lemmas,
which
we will in turn use to show Theorem 1.
The first lemma
applies in both the total order and Condorcet settings, while
the second applies only in the total order setting.
When
proving Theorem 2 we replace Lemma 5 by an alternate
pair of inequalities.
Lemma 4.
E[
¯
D(`)B(`, k)T
`,k
] ≤
1
2p − 1

1 − p
p

`−1
,
E[V (`, k)B(`, k)T
`,k
] ≤
1
2p − 1

1 − p
p

`
.
Lemma 5.
Under the total order assumption:
• E
h
P
N−1
k=1
¯
D(`)
¯
B(`, k)T
`,k
i
is
bounded above
by

1−p
p

`−1
2N`p
2
(2p−1)
4
(log(N ) + 1)
.
Submission and Formatting Instructions for ICML 2017
• E
h
P
N−1
k=1
V (`, k)
¯
B(`, k)T
`,k
i
is bounded above by

1−p
p

`
2N`p
2
(2p−1)
4
(log(N ) + 1)
.
We now state our main result for the total order setting,
which shows that the expected cumulative weak regret is
O

N log(N)
(2p−1)
5

.
Theorem 1.
The expected cumulative weak regret of WS-W
is bounded by
h
2p
3
(2p−1)
6
N (log(N ) + 1) +
N
(2p−1)
2
i
under
the total order assumption.
Proof.
Iterations can be divided into two types:
those in
which the incumbent is better than the challenger, and those
where the incumbent is worse.
We first bound expected total weak regret incurred in the
first type of iteration, and then below bound that incurred in
the second type.
In this first bound, observe that we incur
weak regret during round
`
if
D(`) = 0
, or if
D(`) = 1
but
arm
1
loses to some other arm during this round.
Under
the second scenario, we do not incur any regret until arm
1
loses to another arm.
Thus, the expected weak regret incurred during iterations
with a better incumbent is bounded by
E
"
∞
X
`=1
N−1
X
k=1
B(`, k)T
`,k
¯
D(`) +
∞
X
`=1
N−1
X
k=1
B(`, k)T
`,k
V (`, k)
#
.
The first part of this summation can be bounded by the first
inequality in Lemma 4 to obtain
E
"
∞
X
`=1
N−1
X
k=1
B(`, k)T
`,k
¯
D(`)
#
≤
∞
X
`=1

1 − p
p

`−1
N
2p − 1
=
pN
(2p − 1)
2
.
The second part of this summation can be bounded by the
second inequality in Lemma 4 to obtain
E
"
∞
X
`=1
N−1
X
k=1
B(`, k)T
`,k
V (`, k)
#
≤
∞
X
`=1
N
2p − 1

1 − p
p

`
=
N(1 − p)
(2p − 1)
2
.
Thus, the cumulative expected weak regret incurred during
iterations with a better incumbent is bounded by
N
(2p−1)
2
.
Now we bound the expected weak regret incurred during
iterations where the incumbent is worse than the challenger.
This is bounded by
E
"
∞
X
`=1
N−1
X
k=1
¯
B(`, k)T
`,k
¯
D(`) +
∞
X
`=1
N−1
X
k=1
¯
B(`, k)T
`,k
V (`, k)
#
.
The first term in the summation can be bounded by the first
inequality of Lemma 5 to obtain
E
"
∞
X
`=1
N−1
X
k=1
¯
B(`, k)T
`,k
¯
D(`)
#
≤
∞
X
`=1
2N `p(1 − p)
(2p − 1)
4
(log(N ) + 1)

1 − p
p

`−1
=
2Np
4
(2p − 1)
6
(log(N ) + 1).
The second term in the summation can be bounded by the
first inequality of Lemma 5 to obtain
E
"
∞
X
`=1
N−1
X
k=1
¯
B(`, k)T
`,k
V (`, k)
#
≤
∞
X
`=1
2N`p
2
(2p − 1)
4
(log(N ) + 1)

1 − p
p

`
=
2p
3
(1 − p)
(2p − 1)
6
N (log(N ) + 1).
Thus,
the cumulative expected weak regret incurred dur-
ing iterations
with a worse incumbent
is
bounded by
2p
3
(2p−1)
6
N (log(N ) + 1)
.
Summing these two bounds, the cumulative expected weak
regret is bounded by
h
2p
3
(2p−1)
6
N (log(N ) + 1) +
N
(2p−1)
2
i
.
We prove the following result
for the Condorcet
winner
setting in a similar manner in the supplement.
Theorem 2.
The expected cumulative weak regret of WS-
W is bounded by
N
(2p−1)
2
+
pN
2
(2p−1)
3
under the Condorcet
winner setting.
4.3. Winner Stays with Strong Regret (WS-S)
In this section, we define a version of WS for strong regret,
WS-S, which uses WS-W as a subroutine. WS-S is defined
in Algorithm 2
Each round of WS-S consists of an exploration phase and an
exploitation phase. The length of the exploitation phase in-
creases exponentially with the number of phases. Changing
the parameter
β
balances the lengths of these phases, and
thus balances between exploration and exploitation.
Our
theoretical results below guide choosing
β
.
Submission and Formatting Instructions for ICML 2017
(a) Simulated Dataset
(b) Yelp Academic Dataset
Figure 2.
Comparison of the weak regret between WS-W, RUCB and QSA using simulated data, and the Yelp academic dataset. In both
experiments, WS-W outperforms RUCB and QSA, provided constant expected cumulative weak regret.
Algorithm 2 WS-S
Input:
β > 1
, arms
1, · · · , N
for
` = 1, 2, · · ·
do
Exploration phase: Run the
`
th
round of WS-W.
Exploitation phase:
Let
Z(`)
be the index of the best
arm at
the end of the
`
th
round.
For the next
bβ
`
c
time periods, pull arms
Z(`)
and
Z(`)
and ignore the
feedback.
end
We now bound the cumulative strong regret of this algorithm
under both the total order and Condorcet winner settings:
Theorem 3.
If
there
is
a
total
order
among
arms,
then
for
1
<
β
<
p
1−p
,
the
expected
cu-
mulative
strong
regret
for
WS-S
is
bounded
by
h
2p
3
(2p−1)
6
N (log(N ) + 1) +
N log
β
(T (β−1))
2p−1
i
.
Proof.
Suppose at time T, we are in round
`
. Then
β + · · · +
β
`
≤ T
. Solving for
`
, we obtain
` ≤ log
β
(T (β − 1))
.
We bound the expected strong regret up to time
T
.
The
expected regret can be divided in two parts: the regret oc-
curing during the exploration phase; and the regret occuring
during the exploitation phase.
First we focus on regret incurred during exploration.
We
never pull the same arm twice during this phase,
and so
regret
is incurred in each time period.
To bound regret
incurred during exploration, we bound the length of time
spent in this phase.
The length of time spent in exploration up to the end of
round
`
with a better incumbent is bounded by
(N−1)`
2p−1
. The
length of time spent with a worse incumbent, based on the
proof of Theorem 1, is bounded by
2p
3
(2p−1)
6
N (log(N ) + 1)
.
Now we focus on regret incurred during exploitation. The
probability we have identified the wrong arm at the end of
the
i
th
round is less than

1−p
p

i
. Thus, the expected regret
incurred during this phase up until the end of the
`
th
round
is bounded by
P
`
i=1

1−p
p

i
× β
i
≤ `
.
Overall, this implies that the strong expected regret up to
time
T
(recall that
T
is in round
`
) is bounded by

2p
3
(2p − 1)
6
N(log(N) + 1) + ` +
(N − 1)`
2p − 1

≤

2p
3
(2p − 1)
6
N (log(N ) + 1) +
N log
β
(T (β − 1))
2p − 1

.
Thus,
the
expected
strong
regret
up
to
time
T
is
O(N log(T ) + N log(N ))
.
Theorem 4.
Under the Condorcet winner setting and for
1 < β <
p
1−p
,
the expected cumulative strong regret for
WS-S is bounded by
h
N
2
p
(2p−1)
2
+
N log(T (β−1))
(2p−1) log(β)
i
.
Proof.
The proof mirrors that of Theorem 3, with the only
difference being that we bound the length of exploration
with a worse incumbent using the proof of Theorem 2 rather
than Theorem 1, and the bound is
O(N
2
)
. Due to its simi-
larity, the proof is omitted.
These results provide guidance on the choice of
β
.
If
β
is
too close to 1, then we spend most of the time in the explo-
ration phase, which is guaranteed to generate strong regret.
The last inequality in the proof of Theorem 3 suggests that
asymptotic regret will be smallest if we choose
β
as large
as possible without going beyond the
p/(1 − p)
threshold.
Indeed, if
β
is too large, then WS-S may incur large regret
in early exploitation stages when we have finished only a
few rounds of exploration.
In our numerical experiments
Submission and Formatting Instructions for ICML 2017
we set
β = 1.1
,
which satisfies the
p/(1 − p)
constraint
assumed by our theory if
p > β/(1 + β) ≈ .524
.
With a
properly chosen
β
, the numerical experiments in section 5.2
suggest WS-S performs better than previously devised algo-
rithms. At the same time, the best choice of
β
is dependent
on
p
. Modifying WS-S to eliminate parameters that must be
chosen with knowledge of
p
is left for future work.
Our regret bound grows as
p
,
which is the minimal gap
between two arms, shrinks, and
p
tends to decrease as the
number of arms
N
increases.
Other dueling bandit algo-
rithm for strong regret,
such as RUCB and RMED, have
regret bounds with better dependence on the gaps between
arms. Modifying WS-S to provide improved dependence on
these gaps is also left for future work.
4.4. Extension to Utility-Based Regret
We now briefly discuss utility-based extensions of weak and
strong regret for the total order setting,
following utility-
based bandits studied in Ailon et al.
(2014).
Our regret
bounds also apply here, with a small modification.
Suppose that the user has a utility
u
i
associated with each
arm
i
.
Without loss of generality, we assume
u
1
> u
2
>
· · · > u
N
, and as in the total order setting, we require that
p
i,j
> 0.5
when
i < j
. Typically the
p
i,j
would come from
the utilities of arms
i
and
j
via a generative model. We give
an example in our numerical experiments.
Then, the single-period utility-based weak regret is
r(t) =
u
1
− max{u
i
t
, u
j
t
}
, which is the difference in utility be-
tween the best arm overall and the best arm that the user can
choose from those offered. The single-period utility-based
strong regret is
r(t) = u
1
−
u
i
t
+u
j
t
2
.
To get zero regret
under strong regret, the best arm must be pulled twice.
Our results from Section 4 carry through to this more gen-
eral regret setting.
Let
R = u
1
− u
N
be the maximum
single-period regret. Then, the expected cumulative utility-
based weak regret for WS-W is
O

R
N log(N)
(2p−1)
5

,
and the
expected cumulative utility-based strong regret for WS-S is
O(R [N log(T ) + N log(N )])
.
5. Numerical Experiments
In this section, we evaluate WS under both the weak and
strong regret settings,
considering both their original (bi-
nary) and utility-based versions. In the weak regret setting,
we compare WS-W with RUCB and QSA.
In the strong
regret setting, we compare WS-S with 7 benchmarks includ-
ing RUCB and Relative Minimum Empirical Divergence
(RMED) by Komiyama et al. (2015). We also include an ex-
periment violating the total order assumption in Section 11
in the supplement. WS outperforms all benchmarks tested
in these numerical experiments.
5.1. Weak Regret
We now compare WS-W with QSA and RUCB using simu-
lated data and the Yelp academic dataset (Yelp, 2012).
5.1.1. S
IMULATED
D
ATA
In this example, we compare WS-W with RUCB and QSA
on a problem with
50
arms and binary weak regret.
Each
arm is a 20-dimensional vector uniformly generated from
the unit circle. We assume
p
i,j
= 0.8
for all
i < j
.
The results are summarized in Figure 2a.
RUCB has ap-
proximately linear regret over the time horizon pictured.
This is common in the dueling bandits literature,
where
many algorithms require
∼ 10
4
comparisons before they
achieve
log(T )
cumulative regret for
50
arms. WS-W finds
the optimal arm after
∼ 500
comparisons and has a regret
that is consistent with our theoretically established constant
expected cumulative weak regret.
5.1.2. Y
ELP
A
CADEMIC
D
ATASET
In this example, we compare WS-W with RUCB and QSA
using the Yelp academic dataset (Yelp, 2012) and utility-
based weak regret.
We choose
100
restaurants from Las Vegas as our arms.
Associated with each arm (restaurant)
i
is a
20
-dimensional
feature vector
A
i
,
calculated using doc2vec (Rehurek &
Sojka, 2010) from its reviews. We select 49 users who have
reviewed at least
20
of these
100
restaurants. For each user,
we model their utility for restaurant
i
as
u
i
= A
i
· θ
, where
θ
is a
20
-dimensional vector of preferences. We infer
θ
for
each user using linear regression.
To model
p
i,j
,
we then use the probit model.
We let
ˆ
σ
2
be the estimated variance of the residuals from the linear
regression above. When presented with two restaurants, we
model the user as taking independent random draws from a
normal distribution with means
u
i
and
u
j
respectively and
variances
ˆ
σ
2
,
and choosing the restaurant with the larger
draw.
This gives
p
ij
= Φ(u
i
− u
j
)
, where
Φ(·)
is the cdf
for the normal distribution with mean 0 and variance
2ˆ
σ
2
.
We simulate performance for each user separately, and then
average the results.
These results are summarized in Fig-
ure 2b.
WS-W outperforms RUCB and QSA, finding the
optimal restaurant after
∼ 500
iterations.
5.2. Strong Regret
In this section, we compare WS-S using binary and utility-
based strong regret with 7 benchmarks from the literature.
We use the sushi and MSLR datasets, which were previously
used by Komiyama et al.
(2016) and Zoghi et al.
(2015)
respectively to evaluate dueling bandit algorithms.
Submission and Formatting Instructions for ICML 2017
(a) Sushi dataset with utility-based strong regret
(b) Sushi dataset with binary strong regret
(c) MSLR dataset with utility-based strong regret
(d) MSLR dataset with binary strong regret
Figure 3.
Comparison of the strong regret between WS-S and 7 benchmarks on the sushi and MSLR datasets. For utility-based strong
regret, we start our plot from
t = 10
since the performance of all algorithms are close to each other before
t = 10
. For the same reason,
we start our plot from
t = 100
for the binary strong regret. WS-S outperforms all benchmarks in all settings studied.
The sushi dataset (Komiyama et al., 2016) contains 16 arms
corresponding to types of sushi, with pairwise preferences
inferred from data on sushi preferences from 5000 users in
Kamishima (2003).
The MSLR dataset has 5 arms, corre-
sponding to ranking algorithms, with pairwise preferences
provided in Zoghi et al. (2015). We give preference matrices
(p
i,j
)
for both datasets in the supplement. For utility-based
regret, we define
u
i
= 2(1 − p
1,i
)
.
WS-S has a user-defined parameter
β
.
In our experiments
we set
β = 1.1
. The corresponding minimum
p
for which
our theoretical
bounds hold is
β/(1 + β)
≈ 0.52
.
We
recommend
β ≈ 1.1
for problems of
20
arms or fewer, and
β
closer to 1 for those problems with more arms that are
likely to have
p
closer to
1/2
. We also conduct a sensitivity
analysis of
β
in the supplement.
Figure 3 shows the results of our comparisons. WS-S outper-
forms all 7 benchmarks considered on both datasets using
both variants of strong regret.
6. Conclusion
In this paper, we consider dueling bandits for online content
recommendation using both weak and strong regret.
We propose a new algorithm, WS, with variants designed for
the weak regret (WS-W) and strong regret (WS-S) settings.
We prove WS has constant weak regret and optimal strong
regret in
T
. In numerical experiments, WS outperforms all
benchmarks considered on both simulated and real datasets.
Acknowledgements
The authors were partially supported by NSF CAREER
CMMI-1254298, NSF CMMI-1536895, NSF IIS-1247696,
NSF DMR-1120296, AFOSR FA9550-12-1-0200, AFOSR
FA9550-15-1-0038, and AFOSR FA9550-16-1-0046.
Submission and Formatting Instructions for ICML 2017
References
Ailon,
Nir,
Karnin,
Zohar Shay,
and Joachims,
Thorsten.
Reducing dueling bandits to cardinal bandits.
In ICML,
volume 32, pp. 856–864, 2014.
Barndorff-Nielsen, Ole E and Shiryaev, Albert.
Change of
time and change of measure, volume 21.
World Scientific
Publishing Co Inc, 2015.
Busa-Fekete,
Róbert,
Szörényi,
Balázs,
Cheng,
Weiwei,
Weng,
Paul,
and Hüllermeier,
Eyke.
Top-k selection
based on adaptive sampling of noisy preferences.
In
ICML (3), pp. 1094–1102, 2013.
Busa-Fekete,
Róbert,
Hüllermeier,
Eyke,
and Szörényi,
Balázs.
Preference-based rank elicitation using statis-
tical models:
The case of mallows.
In Proceedings of
the 31st International Conference on Machine Learning
(ICML-14), pp. 1071–1079, 2014.
Hofmann, Katja, Whiteson, Shimon, and Rijke, Maarten De.
Fidelity, soundness, and efficiency of interleaved compari-
son methods. ACM Transactions on Information Systems
(TOIS), 31(4):17, 2013.
Jamieson,
Kevin G and Nowak,
Robert.
Active ranking
using pairwise comparisons.
In Advances in Neural In-
formation Processing Systems, pp. 2240–2248, 2011.
Joachims, Thorsten, Granka, Laura, Pan, Bing, Hembrooke,
Helene, Radlinski, Filip, and Gay, Geri.
Evaluating the
accuracy of implicit feedback from clicks and query re-
formulations in web search.
ACM Transactions on Infor-
mation Systems (TOIS), 25(2):7, 2007.
Kamishima,
Toshihiro.
Nantonac collaborative filtering:
recommendation based on order responses.
In Proceed-
ings of the ninth ACM SIGKDD international conference
on Knowledge discovery and data mining, pp. 583–588.
ACM, 2003.
Karlin,
Samuel.
A First Course In Stochastic Processes.
Academic Press, 1968.
Komiyama, Junpei, Honda, Junya, Kashima, Hisashi, and
Nakagawa,
Hiroshi.
Regret lower bound and optimal
algorithm in dueling bandit problem.
In COLT, pp. 1141–
1154, 2015.
Komiyama, Junpei, Honda, Junya, and Nakagawa, Hiroshi.
Copeland dueling bandit problem: Regret lower bound,
optimal algorithm,
and computationally efficient algo-
rithm.
arXiv preprint arXiv:1605.01677, 2016.
Pallone,
Stephen N,
Frazier,
Peter
I,
and Henderson,
Shane
G.
Bayes-optimal
entropy pursuit
for
ac-
tive choice-based preference learning.
arXiv preprint
arXiv:1702.07694, 2017.
Radlinski, Filip, Kurup, Madhu, and Joachims, Thorsten.
How does clickthrough data reflect retrieval quality? In
Proceedings of the 17th ACM conference on Information
and knowledge management, pp. 43–52. ACM, 2008.
Rehurek, Radim and Sojka, Petr.
Software framework for
topic modelling with large corpora.
In In Proceedings of
the LREC 2010 Workshop on New Challenges for NLP
Frameworks. Citeseer, 2010.
Urvoy, Tanguy, Clerot, Fabrice, Féraud, Raphael, and Naa-
mane,
Sami.
Generic exploration and k-armed voting
bandits.
In ICML (2), pp. 91–99, 2013.
Wang, Y.H.
On the number of success in independent trials.
Statistica Sinica, 1993.
Yelp,
Inc.
Yelp academic dataset,
2012.
URL
https:
//www.yelp.com/dataset_challenge
.
Yue,
Yisong and Joachims,
Thorsten.
Interactively opti-
mizing information retrieval systems as a dueling bandits
problem.
In Proceedings of the 26th Annual International
Conference on Machine Learning, pp. 1201–1208. ACM,
2009.
Yue, Yisong and Joachims, Thorsten.
Beat the mean bandit.
In Proceedings of the 28th International Conference on
Machine Learning (ICML-11), pp. 241–248, 2011.
Yue,
Yisong,
Broder,
Josef,
Kleinberg,
Robert,
and
Joachims, Thorsten.
The k-armed dueling bandits prob-
lem.
Journal of Computer and System Sciences, 78(5):
1538–1556, 2012.
Zoghi, Masrour, Whiteson, Shimon, Munos, Remi, Rijke,
Maarten de, et al. Relative upper confidence bound for the
k-armed dueling bandit problem. In JMLR Workshop and
Conference Proceedings, number 32, pp. 10–18. JMLR,
2014.
Zoghi, Masrour, Karnin, Zohar S, Whiteson, Shimon, and
De Rijke,
Maarten.
Copeland dueling bandits.
In Ad-
vances in Neural Information Processing Systems,
pp.
307–315, 2015.
Supplementary Materials:
Dueling Bandits with Weak Regret
June 15, 2017
A. Gambler’s Ruin Lemma
In our analysis of WS-W, we will use results from a special
case of the Gambler’s ruin problem (Karlin, 1968), stated as
follows: suppose a gambler has
m
dollars initially. In each
of a sequence of rounds, he loses
1
dollar with probability
q 6
=
1
2
and wins
1
dollar with probability
1 − q
.
He stops
playing when he has either
m + 1
dollars or has no money
left. We have the following result, with a proof available on
Page 73 of Karlin (1968).
Lemma 6
(Gambler’s Ruin Lemma)
.
In the gambler’s ruin
problem: (1) the probability that the gambler reaches
m + 1
dollars before reaching
0
dollars is
q
m
=
(
1−q
q
)
m
−1
(
1−q
q
)
m+1
−1
;
(2) the expected number of steps before the gambler stops
playing is
m
1−2q
−
m+1
1−2q
(
1−q
q
)
m
−1
(
1−q
q
)
m+1
−1
.
Observe that the conditional distribution of
T
`,k
and the
winner of iteration
k
round
`
,
given the two arms being
pulled, is given by the result above for the Gambler’s ruin
problem. We leverage this in our proof.
B. Proof of Lemma 1
Proof.
Suppose we are comparing arm
i
versus arm
j
in
this iteration with
i > j
and arm
i
is the incumbent. Then
we know
C(t
`,k
− 1, i) = (N − 1)(` − 1) + k − 1
and
C(t
`,k
− 1, j) = −` + 1
.
We will keep playing these two
arms until
C(t
`,k
+ T
`,k
− 1, i) = (N − 1)(` − 1) + k
or
C(t
`,k
+ T
`,k
− 1, j) = (N − 1)(` − 1) + k
.
Further,
since the winning probability of arm
i
over arm
j
is
p
i,j
over this period, we know the dynamics of this iteration are
the same as those of the Gambler’s Ruin problem. Denote
E = C(t
`,k
− 1, i) − C(t
`,k
− 1, j) + 1 = Nl + k − N
.
Then the expected length of time we spend in this iteration
by Lemma 6 is
E
1 − 2p
i,j
−
E + 1
1 − 2p
i,j

1−p
i,j
p
i,j

E
− 1

1−p
i,j
p
i,j

E+1
− 1
≤
E
1 − 2p
i,j
≤
E
2p − 1
.
The proof of second statement is similar.
Using the same
notation but now supposing
p
i,j
≥ p >
1
2
, we have that the
expected length of time we spend in this iteration is
E
1 − 2p
i,j
−
E + 1
1 − 2p
i,j

1−p
i,j
p
i,j

E
− 1

1−p
i,j
p
i,j

E+1
− 1
=
1
2p
i,j
− 1
−
E + 1
1 − 2p
i,j
p
i,j
(1 − p
i,j
)
E
− (1 − p
i,j
)
E+1
(1 − p
i,j
)
n+1
− p
E+1
i,j
≤
1
2p − 1
.
C. Proof of Lemma 2
In this section,
we prove Lemma 2 from the main paper.
This section is structured as follows:
In section C.1,
we
provide two bounds for the incumbent’s losing and win-
ning probability; In section C.2, we consider a version of
the problem in which better and worse incumbents have
constant (but different) winning probabilities and provide
a upper bound for the number of worse incumbents in a
round before a better incumbent loses ; In section C.3, we
use the results from the previous subsection to bound the
expected number of iterations with a worse incumbent in a
single round before a better incumbent loses, starting from
within a round; In section C.4, we prove a similar bound on
the expected number of iterations with a worse incumbent
in this and future rounds before a better incumbent loses,
starting from the beginning of a round; In section C.5, we
complete the proof of Lemma 2.
Throughout this section, we use a one to one correspondence
between
n
and
(`, k)
defined by
n = (` − 1)(N − 1) + k
,
0 ≤ k ≤ N − 1
and
` = dn/(N − 1)e
.
We also denote
p
∗
=
2p−1
p
.
C.1. Bounds on Win and Loss Probabilities
We first prove the following two lemmas, which give
•
a lower bound for the probability that a worse incum-
bent loses an iteration;
10
Submission and Formatting Instructions for ICML 2017
•
an upper bound for the probability that a better incum-
bent loses an iteration.
Lemma 7.
In iteration
k
of round
`
conditioned on the iden-
tities of the incumbent and the challenger, if the incumbent
is worse than the challenger, then the incumbent loses the
iteration with conditional probability at least
p
∗
=
2p−1
p
.
Proof.
Let
i
be the incumbent
and
j
be the challenger,
with
i
> j
.
C(i, t
`,k
)
≥ 0
and
C(j, t
`,k
)
≤ 0
.
Let
E = C(i, t
`,k
) + |C(j, t
`,k
)| + 1
.
The probability that
arm
i
loses this iterations is the same as
1 − q
E
in the Gam-
bler’s Ruin Lemma, Lemma 6, with
q = p
i,j
< 0.5
.
This
probability is:
1 − q
E
= 1 −

1−p
j,i
p
i,j

E
− 1

1−p
i,j
p
i,j

E+1
− 1
≥

1−p
i,j
p
i,j

E+1
−

1−p
i,j
p
i,j

E

1−p
i,j
p
i,j

E+1
=
1 − 2p
i,j
1 − p
i,j
≥
2p − 1
p
.
Lemma 8.
In iteration
k
of round
`
conditioned on the iden-
tities of the incumbent and the challenger, if the incumbent
is better than the challenger, then the incumbent loses the it-
eration with conditional probability at most

1−p
p

E
, where
E = N(` − 1) + k
.
Proof.
This proof is similar to the previous one.
Suppose
we are pulling arm
i
and
j
with
i < j
and
i
is the incumbent.
Then we know
C(t
`,k
− 1, i) = (N − 1)(` − 1) + k − 1
and
C(t
`,k
− 1, j) = −` + 1
.
The probability that arm
i
loses
is equal to
1 − q
E
from the gambler’s ruin problem, where
E = (N − 1)(` − 1) + k − 1 + ` − 1 = N(` − 1) + k
. We
have
1 − q
E
= 1 −

1−p
i,j
p
i,j

E
− 1

1−p
i,j
p
i,j

E+1
− 1
=

1−p
i,j
p
i,j

E
[1 −
1−p
p
]
1 −

1−p
i,j
p
i,j

E+1
≤

1 − p
i,j
p
i,j

E
≤

1 − p
p

E
.
C.2. Definition and Upper Bound for
g(b, m)
In this section,
we define a function
g(b, m)
as follows.
First, we define
g(0, m) = 0
for any
m
. We define
g(b, m)
for other integers
b
,
m
satisfying
m > 0
and
0 ≤ b ≤ m
recursively, as follows:
g(b, m)
=
b
m
+
b−1
X
b
0
=0
1
m
p
∗
g(b
0
, m − 1) +
m−1
X
b
0
=b
1
m
g(b, m − 1)
+
b−1
X
b
0
=0
1
m
(1 − p
∗
)g(b − 1, m − 1)
=
b
m
+
b−1
X
b
0
=0
1
m
p
∗
g(b
0
, m − 1) +
m − b
m
g(b, m − 1)
+
b
m
(1 − p
∗
)g(b − 1, m − 1)
(1)
Intuitively,
g(b, m)
is the expected number of future itera-
tions in which the incumbent is worse than the challenger,
starting with
m
arms that have not dueled yet
b
of which are
better than the incumbent, when we stop counting when we
reach the end of the round or when an incumbent loses to a
worse challenger, in a simplified problem in which worse
incumbents beat better challengers with probability
p
∗
. In
our problem, this probability is not
p
∗
, but is bounded below
by this quantity, and in the next section we will show that
g(b, m)
is an upper bound on an analogous quantity in our
problem.
We prove the following result about
g
.
Lemma 9.
For
0 ≤ b ≤ m ≤ N − 1
, we have
g(b, m) = g(b, b) ≤
log(b) + 1
p
∗
.
Proof.
Given the boundary conditions
g(0, m) = 0
for all
m
,
we know Equation
(1)
has a unique solution.
In this
proof,
•
We first assume
g(b, m) = g(b, b)
for all
b ≤ m
and
solve for
g(b, m)
;
•
Then we show that this
g(b, m)
is indeed the solution
for Equation (1), verifying that
g(b, m)
is as claimed;
•
Finally, we show
g(b, m) ≤
log(b)+1
p
∗
.
First,
we solve for
g(b, m)
with the assumption that
g(b, m) = g(b, b)
for
b ≤ m
. Setting
m = b
in Equation
(1)
Submission and Formatting Instructions for ICML 2017
provides
g(b, b) = 1 +
b−1
X
b
0
=0
p
∗
g(b
0
, b)
b
+ (1 − p
∗
)g(b − 1, b − 1).
(2)
Thus, we know
b−1
X
b
0
=1
p
∗
g(b
0
, b + 1)
=
b−1
X
b
0
=1
p
∗
g(b
0
, b)
=b [g(b, b) − 1 − (1 − p
∗
)g(b − 1, b − 1)] .
Therefore, Equation (2) becomes
g(b + 1, b + 1)
=1 +
b
b + 1
[g(b, b) − 1 − (1 − p
∗
)g(b − 1, b − 1)]
+
p
∗
g(b, b)
b + 1
+ (1 − p
∗
g(b, b).
Re-organizing the terms, we have
g(b + 1, b + 1) − g(b, b)
=
1
b + 1
+
b
b + 1
(1 − p
∗
)[g(b, b) − g(b − 1, b − 1)].
Denote
F (b) = g(b, b)−g(b−1, b−1)
. We know
F (1) = 1
.
Thus, we have
F (b) =
1
b
+
b − 1
b
(1 − p
∗
)F (b − 1)
=
1
b
+
1 − p
∗
b
+
b − 2
b
(1 − p
∗
)
2
F (b − 2)
=
1
b
+
1 − p
∗
b
+ · · ·
(1 − p
∗
)
b−1
b
.
Therefore,
g(b, b) =
b
X
k=1
F (k)
=
b
X
k=1

1
k
+
1 − p
∗
k
+ · · ·
(1 − p
∗
)
k−1
k

.
Thus, if
g(b, m) = g(b, b)
for all
b ≤ m
, we know
g(b, m) =
b
X
k=1

1
k
+
1 − p
∗
k
+ · · ·
(1 − p
∗
)
k−1
k

.
Now we verify that this is the correct solution.
We prove
this by induction on
b
. For
b = 1
, Equation (1) becomes
g(1, m) =
1
m
+
m − 1
m
g(1, m − 1).
Since
g(1, 1) = 1
, it is easy to check
g(1, 2) = g(1, 3) =
· · · = g(1, N − 1) = 1
.
Suppose this
g(b, m) = g(b, b)
are true for all
b ≤ m
,
b ≤ k
.
For
b = k + 1
, Equation (1) becomes
g(k + 1, m)
=
k + 1
m
+
k
X
b
0
=0
p
∗
m
g(b
0
, m − 1) +
m − k − 1
m
g(k + 1, m − 1)
+
k + 1
m
(1 − p
∗
)g(k, m − 1)
=
k + 1
m
+
k
X
b
0
=0
p
∗
m
g(b
0
, b
0
) +
m − k − 1
m
g(k + 1, m − 1)
+
k + 1
m
(1 − p
∗
)g(k, k).
To show
g(k + 1, m)
does not depend on
m
,
we need to
prove the following equation is true for
m = k + 2, k +
3, · · · , N − 1
.
k + 1
m
+
k
X
b
0
=0
p
∗
m
g(b
0
, b
0
) +
k + 1
m
(1 − p
∗
)g(k, k)
=
k + 1
m
g(k + 1, m − 1)
⇐⇒ k + 1 +
k
X
b
0
=0
p
∗
g(b
0
, b
0
) + (k + 1)(1 − p
∗
)g(k, k)
=(k + 1)g(k + 1, m − 1)
(3)
We first check Equation
(3)
when
m = k + 2
. Starting from
the left hand side, we have
k + 1 +
k
X
b
0
=0
g(b
0
, b
0
) + (k + 1)(1 − p
∗
)g(k, k)
=k + 1 + (k + 1)[g(k + 1, k + 1) − 1 − (1 − p
∗
)g(k, k)]
(4)
+ (k + 1)(1 − p
∗
)g(k, k)
=(k + 1)g(k + 1, k + 1),
which equals to the right hand side.
Equation
(4)
follows
from Equation
(2)
(Equation
(2)
holds because
g(b, m) =
g(b, b)
for all
b ≤ k
).
Again, by induction, we know
(3)
is true for all
m = k +
2, · · · , N − 1
and thus we concludes our induction.
We have shown that
g(b, m) = g(b, b)
for all
b ≤ m
.
Finally,
we prove
g(b, b) = g(b, m) ≤
log(b)+1
p
∗
.
This is
Submission and Formatting Instructions for ICML 2017
because
g(b, m) =g(b, b)
=
b
X
k=1

1
k
+
1 − p
∗
k
+ · · ·
(1 − p
∗
)
k−1
k

≤
b
X
k=1

1
k
+
1 − p
∗
k
+ · · ·
(1 − p
∗
)
b−1
k

=
b
X
k=1
1
k

1 + (1 − p
∗
) + · · · + (1 − p
∗
)
b−1

≤
log(b) + 1
p
∗
,
which concludes our proof.
C.3. Bound on the Number of Iterations in One Round
with a Worse Incumbent, Starting from Within
the Round
Let
B(n)
denote an indicator function that equals 1 if we
have a better incumbent at the
n
th
iteration. The definition
of
B(n)
is very similar to
B(`, k)
except
B(`, k)
tracks
both round and iteration number. Similarly, we use
¯
B(n) =
1 − B(n)
to denote an indicator function that equals 1 if we
have a worse incumbent at the
n
th
iteration.
Let
h(i, n, A)
be the expected number of iterations with
an incumbent that is worse than the challenger,
between
iteration
n
and the first time that a better incumbent loses
to a challenger or the round ends, given that the incumbent
arm at iteration
n
is
i
and
A
is the set of arms that have not
yet previously dueled in the round. Formally, we define this
quantity as:
h(i, n, A) = E
"
σ−1
X
n
0
=n
B(n
0
)|A, i
n
= i
#
,
where
•
Conditioning on
A
is understood to mean that we are
conditoning on
C(n − 1, j) = −` + 1 ∀ j /
∈ A ∪ {i
n
}
,
and
C(n − 1, j) = −` ∀ j ∈ A
, where
` = dn/(N −
1)e
is the round in which iteration
n
resides. In other
words, it is understood to mean that
A
contains the set
of arms that have not yet dueled in this round.
• σ = min {n
0
> n : J(n
0
) = 1, n
0
= Ndn/(N − 1)e}
where
J(n)
is an indicator that equals 1 when a better
incumbent loses at iteration
n
, i.e.,
σ
is the first time
that either a better incumbent loses or the round ends.
Lemma 10.
For any
i
,
`
,
k
and
A
, we have
h(i, n, A) ≤ g(b, m) ≤
log(N ) + 1
p
∗
,
where
m = N − k
and
b = |{u ∈ A : u < i}|
.
Proof.
Denote
q
i,j
(n)
as the probability that incumbent arm
i
will beat challenger
j
at time n. We first write a recursive
expression for
h(i, n, A)
that applies when
n
is not divisible
by
N
:
h(i, n, A) =
X
{j∈A:i>j}

1 +
q
i,j
(n)
N − k
h(i, n + 1, A ∪ {j})
+
1 − q
i,j
(n)
N − k
h(j, n + 1, A ∪ {i})

+
X
{j∈A:i<j}
q
i,j
(n)
N − k
h(i, n + 1, A ∪ j).
(5)
When
n
is divisible by
N − 1
, the only allowed value of
A
is
∅
and
h(i, n, ∅) = 0
.
We then prove the desired result via induction on the number
of iterations in the round, i.e., on
n (mod N − 1)
.
When
n (mod N − 1) = 0
, we have
h(i, n, ∅) = 0
,
b = 0
, and
g(b, m) = 0
. Thus the result holds in this case.
Then suppose the result holds for all
n
with a particular
value of
n (mod N − 1)
and we show it holds for
n − 1
.
Applying the induction hypothesis to the right-hand side of
(5), we have
h(i, n, A) ≤
X
{j∈A:i>j}

1 +
q
i,j
(n)
m
g(b
i,j
, m − 1)
+
1 − q
i,j
(n)
m
g(b
j,j
, m − 1)

+
X
{j∈A:i<j}
q
i,j
(n)
m
g(b
i,j
, m − 1),
(6)
where
b
u,j
= #{u
0
∈ A \ {j} : u
0
< u}
.
Consider the summand in the first sum in
(6)
, dropping the
constants
1
and
1
m
,
q
i,j
(n)g(b
i,j
, m − 1) + (1 − q
i,j
(n))g(b
j,j
, m − 1).
(7)
This is increasing in
q
i,j
(n)
when
i > j
since
b
i,j
> b
j,j
,
and since
g(b, m)
is increasing in
b
. Since
i
is an incumbent
that is worse than the challenger when
i > j
,
Lemma 7
shows that
q
i,j
(n) ≤ 1 − p
∗
= 1 −
2p−1
p
in this situation.
Thus, this summand is bounded above by
(1−p
∗
)g(b
i,j
, m−
1) + p
∗
g(b
j,j
, m − 1)
.
Substituting this into
(6)
, along with the inequality
q
i,j
(n) ≤
Submission and Formatting Instructions for ICML 2017
1
in the last term, we have
h(i, n, A)
≤
X
{j∈A:i>j}

1 +
1 − p
∗
m
g(b
i,j
, m−1) +
p
∗
m
g(b
j,j
, m−1)

+
X
{j∈A:i<j}
1
m
g(b
i,j
, m − 1)
=
b
m
+
b
m
(1 − p
∗
)g(b − 1, m − 1) +
b−1
X
b
0
=0
p
∗
m
g(b
0
, m − 1)
+
m − b
m
g(b, m − 1)
=g(b, m)
In the second to last line we have used that
{b
i,j
:
j
∈
A, i > j} = {0, . . . , b − 1}
and
b
i,j
= b − 1
when
i > j
;
b
i,j
= b
when
i < j
; and that the cardinality of
{j ∈ A :
i > j}
and
{j ∈ A : i < j}
are
b
and
m−b
respectively. In
the last line we have used the recursive definition of
g(b, m)
in terms of
g(·, m − 1)
.
This shows the first inequality in the statement of the lemma.
The second inequality follows directly from Lemma 9.
C.4. Bound on the Number of Iterations with a Worse
Incumbent, Starting from a Round Beginning
Denote
f (i, `)
to be the expected number of iterations with
a worse incumbent in this and future rounds, stopping as
soon as a better incumbent loses, giving that we have arm i
as the incumbent at the start of round
`
.
Lemma 11.
For any
i
and
`
, we have
f (i, `) ≤
log(N ) + 1
(p
∗
)
2
.
Proof.
Let
U (i, `)
denote the expected number of iterations
in round
`
with a worse incumbent before a better incumbent
loses. We use
V (`)
to denote an indicator which equals to
1
if a better incumbent does not lose in the round
`
. Then for
i > 1
,
f (i, `) = U (i, `) + E[f (Z(`), ` + 1)V (`)|Z(` − 1) = i].
The first term is bounded by Lemma 10 by
U (i, `) ≤
log(N ) + 1
p
∗
,
for all
i
and
`
.
For the second term, since
f (Z(`), ` + 1) = 0
when
Z(`) =
1
, we know the second term is bounded by
E[f (Z(`), ` + 1)V (`)|Z(` − 1) = i]
≤E[f (Z(`), ` + 1)|Z(`) 6= 1, V (`) = 1, Z(` − 1) = i]
× P (Z(`) 6= 1, V (`)|Z(` − 1) = i).
Let
s
j
= P (Z(`) = j|Z(`) 6= 1, V (`), Z(` − 1) = i)
to be
the probability distribution over the integers from
2
through
N
. Then we know
E[f (Z(`), ` + 1)|Z(`) 6= 1, V (`) = 1, Z(` − 1) = i]
=
N
X
j=2
s
j
f (j, ` + 1)
≤
max
j=2,. . . ,N
f (j, ` + 1).
Further,
since if arm
1
wins its first duel as a challenger
(which happens with probability at least
p
∗
),
then either
Z(`)
= 1
(it
wins all
subsequent
duel
in the round) or
V (`) = 0
(it loses a subsequent duel), we have
P (Z(`) 6
=
1, V (`)|Z(` − 1) = i) ≤ 1 − p∗
.
Thus, we know
f (i, `) ≤
log(N ) + 1
p
∗
+ (1 − p
∗
)
max
j=2,··· ,N
f (j, ` + 1).
Let
f(`) = max
j=2,··· ,N
f (j, `)
. Then,
f (`) ≤
log(N ) + 1
p
∗
+ (1 − p
∗
)f (` + 1).
Thus,
f (1) ≤
log(N ) + 1
p
∗
+ (1 − p
∗
)f (2)
≤
log(N ) + 1
p
∗
(1 + (1 − p
∗
) + (1 − p
∗
)
2
+ · · · )
=
log(N ) + 1
(p
∗
)
2
.
C.5. Completing the Proof of Lemma 2
With the lemmas in the preceding subsections established,
we now complete the proof of Lemma 2.
Proof.
Let
τ
0
= 0
and
τ
k
= {n > τ
k−1
: J(n) = 1}
.
The
expected number of iterations with a worse incumbent is
Submission and Formatting Instructions for ICML 2017
E
"
∞
X
n=0
¯
B(n)
#
=E
∞
X
k=0
1{τ
k
< ∞}
∞
X
n=τ
k
1{n < τ
k+1
}
¯
B(n)
=
∞
X
k=0
P (τ
k
< ∞)E
"
∞
X
n=τ
k
1{n < τ
k+1
}
¯
B(n)|τ
k
< ∞
#
where we have used Tonelli’s theorem to exchange the ex-
pectation of an infinite sum of non-negative terms with an
infinite sum of expectations of the same terms.
Conditioning on the history available at time
τ
k
, we have
that the inner expectation can be written as,
E
"
∞
X
n=τ
k
1{n < τ
k+1
}
¯
B(n)|τ
k
< ∞
#
=E
"
E
"
∞
X
n=τ
k
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞
#
|τ
k
< ∞
#
,
where
H
n
is the sigma algebra generated by
(C(i, s) : s <
t
`,k
0
, i
= 1, . . . , N )
,
where
` = n (mod N − 1)
,
k
0
=
dn/(N − 1)e
, and
H
τ
k
is the filtration
(H
n
: n)
stopped at
τ
k
.
We
further
break
this
inner
term
E

P
∞
n=τ
k
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞

into
two
parts:
the part that occurs during the round in which
τ
k
resides,
and the part
that
occurs in future rounds.
Let
`
k
= dτ
k
/(N − 1)e
. Then,
E
"
∞
X
n=τ
k
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞
#
=E
"
`
k
N
X
n=τ
k
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞
#
+E
"
∞
X
n=`
k
N+1
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞
#
≤
log(N ) + 1
p
∗
+
log(N ) + 1
(p
∗
)
2
≤
2(log(N ) + 1)
(p
∗
)
2
where the second to last inequality relies on Lemma 10
to
show
E
h
P
`
k
N
n=τ
k
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞
i
is bounded above by
log(N)+1
p
∗
and Lemma 11 to show
E

P
∞
n=`
k
N+1
1{n < τ
k+1
}
¯
B(n)|H
τ
k
, τ
k
< ∞

is
bounded above by
log(N)+1
(p
∗
)
2
.
Thus,
E
"
∞
X
n=0
¯
B(n)
#
≤
2(log(N ) + 1)
(p
∗
)
2
∞
X
k=0
P (τ
k
< ∞).
Now we bound
P (τ
k
< ∞)
for a fixed k.
Based on
Lemma 8, we know
J(n)
is a Bernoulli random variable
with success rate less than

1−p
p

n
(this is because of
Lemma 8 and
n = (N − 1)(` − 1) + k < E
),
indepen-
dent across n. Let
Q
n
denote a Bernoulli random variable
with success rate

1−p
p

n
. Then we know:
P (τ
k
< ∞) ≤ P
∞
X
i=1
J(i) ≥ k
!
≤ P
∞
X
i=1
Q
i
≥ k
!
.
Let
W
m
=
P
m
i=1
Q
i
, which follows a Poisson Bernoulli
distribution,
and let
W = lim
m→∞
W
m
.
W
follows a
Poisson distribution with parameter
P
∞
i=1

1−p
p

i
=
1−p
2p−1
(Theorem 4, Wang (1993)). Thus,
E
"
∞
X
n=0
¯
B(n)
#
≤
2(log(N ) + 1)
(p
∗
)
2
∞
X
k=0
P (W ≥ k)
=
2p
2
(1 − p)
(2p − 1)
3
(log(N ) + 1)
≤
2p
2
(2p − 1)
3
(log(N ) + 1)
D. Proof of Lemma 3
Proof.
It is easy to see that at the last iteration which has
a worse incumbent, the better arm is always arm
1
.
Thus,
we only consider
C(t, 1)
in this proof. At the end of the
`
th
round, if
C(t
`+1
−1, 1) < 0
, we know
C(t
`+1
−1, 1) = −`
.
Let us consider a simple random walk W(t) such that
W (t +
1) = W (t) + 1
with probability
p >
1
2
and
W (t + 1) =
W (t) − 1
with probability
1 − p
for
t ≥ 1
.
If we denote
p
∗
`
= P (∃t
∗
, W (t
∗
) = −`)
for
` > 0
,
then it is easy to
calculate that
p
∗
`
=

1−p
p

`
.
Now let us consider
C(t, 1)
.
If we pull arm
1
with some
other arm
i
at time t, then
C(t, 1) = C(t−1, 1)+1
happens
with probability
p
1,i
> p
and
C(t, 1) = C(t − 1, 1) − 1
with probability
1 − p
1,i
< 1 − p
.
If we do not pull arm
1
at time
t
, then
C(t, 1) = C(t − 1, 1)
with probability
1
.
Define
τ
1
= 1
and
τ
k
= min
t
{t
> τ
k−1
, C(t, 1)
6
=
C(τ
k−1
, 1)}
,
for
k = 1, 2, · · · ,
.
Because
τ
k
is a non-
decreasing right
continuous stopping time,
we know it
Submission and Formatting Instructions for ICML 2017
is a valid random change of time (Barndorff-Nielsen &
Shiryaev,
2015).
Define
R(k)
a new stochastic process
where
R(k) = C(τ
k
, 1)
.
Then we know at every time k,
R(k) = R(k − 1) + 1
with probability greater or equal to
p and
R(k) = R(k − 1) − 1
with probability less than 1-p.
Define
p
`
= P (∃t
∗
, R(t
∗
) = −`)
, then it is easy to prove
p
`
≤ p
∗
`
=

1−p
p

`
using first step analysis and induction
(we leave the proof as an exercise for the reader),
which
means
P (∃t
∗
, C(t
∗
, 1) = −`) ≤

1−p
p

`
.
E. Proof of Lemma 4
Proof.
To show the first claimed equation, we have:
E[B(`, k)T
`,k
¯
D(`)]
=E[B(`, k)T
`,k
|
¯
D(`) = 1]P (
¯
D(`) = 1).
(8)
The
first
term
E[B(`, k)T
`,k
|
¯
D(`)
=
1]
can
be
bounded by writing it
as
E[B(`, k)T
`,k
|
¯
D(`)
= 1]
=
E[E[B(`, k)T
`,k
|
¯
D(`)
= 1, A(`, k)]|
¯
D(`)
= 1]
,
where
A(`, k)
denotes the pair of arms being pulled in iteration
k
round
`
.
We
focus
on
the
inner
term
E[B(`, k)T
`,k
|
¯
D(`)
=
1, A(`, k)]
.
B(`, k)
is
observable given
A(`, k)
.
If
B(`, k) = 0
then this inner term is
0
.
If
B(`, k) = 1
then
this inner term is
E[T
`,k
|A(`, k)]
(where we note that
T
`,k
is conditionally independent of
¯
D(`)
given
A(`, k)
) and is
bounded above by
1/(2p − 1)
by Lemma 1. In both cases,
the inner term is bounded above by
1/(2p − 1)
, and we have
that
E[B(`, k)T
`,k
|
¯
D(`) = 1] ≤ 1/(2p − 1)
.
Thus, we have that (8) is bounded above by
1
2p − 1
P (
¯
D(`) = 1) ≤
1
2p − 1

1 − p
p

`−1
,
where the final inequality follows from Lemma 3 and the
fact that
¯
D(`) = 1
implies
L ≥ ` − 1
.
To show the second claimed equation, we use the same proof
technique used for the first and get:
E[B(`, k)T
`,k
V (`, k)] ≤
1
2p − 1
P (V (`, k) = 1).
Now we just
need to compute
P (V (`, k)
= 1)
.
Given
C(t
`
− 1, 1) = (N − 1)(` − 1)
at the beginning of round
`
, it loses only if there exists a
t
0
≥ t
`
and
C(1, t
0
) = −`
.
Using the results from Lemma 3, we know
P (V (`, k) =
1)
≤

1−p
p

`
.
This completes the proof of the second
claimed equation.
F. Proof of Lemma 5
Proof.
For the first inequality, we know
E
"
N−1
X
k=1
¯
B(`, k)T
`,k
¯
D(`)
#
=
N−1
X
k=1
E

E[
¯
B(`, k)T
`,k
|D(`) = 0]
¯
D(`)

.
(9)
Moreover,
E[
¯
B(`, k)T
`,k
|D(`) = 0]
=E[T
`,k
|B(`, k) = 0, D(`) = 0]P (B(`, k) = 0|D(`) = 0)
≤
N`
2p − 1
P (B(`, k) = 0|D(`) = 0),
where the last equation follows from applying Lemma 1 and
iterated conditional expectation. Thus, we know
(9) =
N−1
X
k=1
N`
2p − 1
P (B(`, k) = 0|D(`) = 0)E[
¯
D(`)]
≤
N−1
X
k=1
N`
2p − 1
P (B(`, k) = 0|D(`) = 0)

1 − p
p

`−1
(10)
≤

1 − p
p

`−1
2N`p
2
(2p − 1)
4
(log(N ) + 1),
where equation (10) is because Lemma 2.
The proof of the second inequality follows very similarly,
and is omitted.
G. Proof of Theorem 2
In this section,
we prove the cumulative expected weak
regret of WS-W is bounded by
O(N
2
)
in the Condorcet
winner setting. First, we want to give an example to illustrate
why our algorithm will not have
O(N log(N ))
regret under
the Condorcet winner setting.
In the Condorcet winner setting, Lemma 2 is no longer true.
Here is a counter example to illustrate why Lemma 2 does
not
hold true anymore.
Suppose we have
N = 3k + 1
arms in total, which includes a Condorcet winner arm and
three types of other arms:
k type-A arms, k type-B arms
and k type-C arms. Among these arms, we assume the user
prefers type-A arms than type-B arms,
type-B arms than
type-C arms and type-C arms than type-A arms.
Among
each type of arms, there is a total order. In this setting, the
expected number of iterations with a worse incumbent is
Submission and Formatting Instructions for ICML 2017


























0.5
0.512
0.622
0.655
0.698
0.726
0.711
0.708
0.749
0.8
0.741
0.783
0.847
0.817
0.854
0.868
0.488
0.5
0.602
0.683
0.652
0.776
0.663
0.683
0.738
0.709
0.786
0.802
0.83
0.85
0.871
0.873
0.378
0.398
0.5
0.528
0.554
0.533
0.534
0.591
0.573
0.593
0.661
0.705
0.734
0.672
0.787
0.822
0.345
0.317
0.472
0.5
0.553
0.619
0.566
0.641
0.675
0.687
0.665
0.696
0.803
0.823
0.796
0.844
0.302
0.348
0.446
0.447
0.5
0.513
0.524
0.518
0.608
0.538
0.643
0.61
0.695
0.672
0.681
0.775
0.274
0.224
0.467
0.381
0.487
0.5
0.513
0.559
0.575
0.621
0.591
0.701
0.702
0.787
0.829
0.811
0.289
0.337
0.466
0.434
0.476
0.487
0.5
0.559
0.553
0.613
0.564
0.607
0.703
0.735
0.736
0.801
0.292
0.317
0.409
0.359
0.482
0.441
0.441
0.5
0.556
0.527
0.562
0.58
0.668
0.805
0.777
0.767
0.251
0.262
0.427
0.325
0.392
0.425
0.447
0.444
0.5
0.512
0.548
0.542
0.612
0.786
0.71
0.685
0.2
0.291
0.407
0.313
0.462
0.379
0.387
0.473
0.488
0.5
0.543
0.579
0.613
0.718
0.685
0.747
0.259
0.214
0.339
0.335
0.357
0.409
0.436
0.438
0.452
0.457
0.5
0.564
0.625
0.618
0.702
0.684
0.217
0.198
0.295
0.304
0.39
0.299
0.393
0.42
0.458
0.421
0.436
0.5
0.542
0.644
0.7
0.733
0.153
0.17
0.266
0.197
0.305
0.298
0.297
0.332
0.388
0.387
0.375
0.458
0.5
0.577
0.607
0.596
0.183
0.15
0.328
0.177
0.328
0.213
0.265
0.195
0.214
0.282
0.382
0.356
0.423
0.5
0.578
0.637
0.146
0.129
0.213
0.204
0.319
0.171
0.264
0.223
0.29
0.315
0.298
0.3
0.393
0.422
0.5
0.586
0.132
0.127
0.178
0.156
0.225
0.189
0.199
0.233
0.315
0.253
0.316
0.267
0.404
0.363
0.414
0.5


























Figure 4.
User’s preference matrix for the Sushi experiment
(a) Cyclic dataset with utility-based strong regret
(b) Cyclic dataset with binary strong regret
Figure 5.
Comparison of the strong regret between WS-S and 7 benchmarks on the cyclic dataset. WS-S outperforms all benchmarks in
all settings studied.
O(N)
instead of
O(log(N ))
, which means Lemma 2 is no
longer true.
Now we start our proof for Theorem 2.
Proof.
In the Condorcent winner setting, Lemmas 3 and 4
hold, but as explained earlier, Lemma 2 does not. Because
the proof of Lemma 5 utilizes Lemma 2, Lemma 5 also no
longer holds.
On the other hand, since we can have at most
N − 1
itera-
tions in a round, we know the following statement is true:
the conditional expected number of iterations with a worse
incumbent is bounded by
N
in each round. Thus, we know
Lemma 5 now becomes:
E
"
N−1
X
k=1
¯
B(`, k)T
`,k
¯
D(`)
#
≤

1 − p
p

`−1
N
2
`
2p − 1
,
E
"
N−1
X
k=1
¯
B(`, k)T
`,k
V (`, k)
#
≤

1 − p
p

`
N
2
`
2p − 1
.
Thus, following the same reasoning as in the proof of Theo-
rem 1, we know the expected weak regret in the Condorcet
winner setting is bounded by
NR
(2p − 1)
2
+
pN
2
(2p − 1)
3
,
which concludes our proof.
H. Preference Matrices
In the sushi experiment, the user’s preference matrix is given
by Figure 4.
In the MSLR experiment, the ranker’s preference matrix is
given by:






0.5
0.535
0.613
0.757
0.765
0.465
0.5
0.580
0.727
0.738
0.387
0.420
0.5
0.659
0.669
0.243
0.276
0.341
0.5
0.510
0.235
0.262
0.331
0.490
0.5






Submission and Formatting Instructions for ICML 2017
I. Condorcet Winner Experiment
In the main paper,
we considered numerical examples in
which the arms have a total order.
This is common in the
dueling bandits literature, where even work that considers
more general settings theoretically test their methods on
problems that satisfy the total order assumption (Komiyama
et al., 2016; Urvoy et al., 2013).
In this section, we consider an additional example that has
a Condorcet winner but does not have a total order among
arms.
The example has a cyclic struture, and is similar to
the cyclic example in Komiyama et al. (2015).
The preference matrix is:




0.5
0.6
0.6
0.6
0.4
0.5
0.6
0.4
0.4
0.4
0.5
0.6
0.4
0.6
0.4
0.5




In the above example, arm
1
is the Condorcet winner. Arm
2
beats arm
3
, arm
3
beats arm
4
and arm
4
beats arm
2
.
Again, we consider both binary strong regret and the utility-
based strong regret.
The utility-based strong regret is de-
fined the same as the other two experiments.
The result
is summarized in Figure 5.
WS-S outperforms all bench-
marks considered in all time periods on binary regret, and
outperforms them all in all time periods except
T = 10
2
on
utility-based regret.
J. Sensitivity Analysis
In this section, we conduct a sensitivity analysis of
β
in WS-
S using the MSLR dataset. In this analysis, we choose
β =
1.01, 1.05, 1.1, 1.2, 1.5
respectively and compare them with
RMED and RUCB. The result is summarized in Figure 6.
Figure 6.
Sensitivity Analysis
Based on Figure 6, WS-S with
β = 1.05, 1.1, 1.2
outper-
forms RMED and RUCB. When
β = 1.01
, we spend too
much time on the exploration period and do not exploit
enough.
Similarly, WS-S with
β = 1.5
over exploits and
does not explore enough.
In both cases, WS-S underper-
forms RMED and RUCB. However, as long as
β
is within a
reasonable range, WS-S can outperform existing state-of-art
algorithms.
