A Uniﬁed Framework for Studying Architectural Decay of Software Systems
by
Joshua Garcia
A Dissertation Presented to the
FACULTY OF THE USC GRADUATE SCHOOL
UNIVERSITY OF SOUTHERN CALIFORNIA
In Partial Fulﬁllment of the
Requirements for the Degree
DOCTOR OF PHILOSOPHY
(COMPUTER SCIENCE)
August 2014
Copyright
2014
Joshua Garcia
PREVIEW
All rights reserved
INFORMATION TO ALL USERS
The quality of this reproduction is dependent upon the quality of the copy submitted.
In the unlikely event that the author did not send a complete manuscript
and there are missing pages, these will be noted. Also, if material had to be removed, 
a note will indicate the deletion.
Microform Edition © ProQuest LLC.
All rights reserved. This work is protected against
unauthorized copying under Title 17, United States Code
ProQuest LLC.
789 East Eisenhower Parkway
P.O. Box 1346
Ann Arbor, MI 48106 - 1346
UMI 3644620
Published by ProQuest LLC (2014). Copyright in the Dissertation held by the Author.
UMI Number: 3644620
PREVIEW
Dedication
To my parents, family, and loved ones.
ii
PREVIEW
Acknowledgments
I have had the pleasure of interacting with many people along the way to completing this
dissertation.
From those people,
I have gained new knowledge,
skills,
and friendships.
In some cases,
I have been lucky to maintain the support of
existing relationships.
In
fact, I can probably write a dissertation-length manuscript about how lucky and grateful
I am to have had the backing of so many people—I hope the following pages will
be a
good-enough substitute.
First, I must express my deepest gratitude to my advisor, Nenad (Neno) Medvidovic,
for guiding and supporting me since my undergraduate years.
Neno has been simultane-
ously my greatest endorser and harshest critic.
By being both, he has been encouraging
while still providing the criticism necessary to make my work as strong as possible.
De-
spite his incredibly busy schedule, he has worked long hours to (1) fund me and (2) help
me write about and present my work.
Not only has Neno nurtured my technical
and
communication skills, he has also provided me sympathy and understanding when unfor-
tunate events have occurred in my life.
I am lucky to have had such a competent, caring,
and understanding advisor who is always ready to provide insight and inspiration.
iii
PREVIEW
My dissertation would not have made it this far without the guidance of my qualifying-
exam and dissertation committees.
I am grateful
to the members of
my committees:
Professors Barry Boehm, Stan Settles, William G.J. Halfond, and Fei Sha.
Several people were instrumental in helping me to enter the USC Computer Science
PhD program.
Those people include Alexandre Fran¸
cois, Prof.
Tom Jordan, Prof.
Lau-
rent Itti, and Margery Berti.
Neno’s research group and its alumni have (1) taught me an immense amount about
conducting software-engineering research and surviving the PhD program and (2) shared
their friendship with me.
My fellow group members and group alumni have encouraged
and inspired me.
They have taken time out to review my papers and presentations, write
papers with me,
or listen to and critique my ﬂedgling ideas.
When I would be stuck or
frustrated, they would take time out of their busy schedules to help guide me and pull me
out of whatever rut I was in.
In some cases, they would help me formulate and ﬂesh out
ideas or run experiments.
Without their support, I would never have made it through.
I
am immensely grateful to all of them.
During my PhD journey, Daniel Popescu has been the research-group member that I
have worked with the most.
Together, we discussed new ideas, ran experiments, assisted
in teaching courses, and wrote several papers.
I was privileged to experience many trials,
tribulations, and successes working with Daniel.
All of these experiences with him have
helped to improve my critical
thinking,
communication skills,
and technical
skills.
He
even spearheaded work that I
eventually took over,
which includes the architectural-
smells work and our joint ESEC/FSE paper.
I am immensely grateful for his friendship
and the many opportunities I’ve had to work with him.
iv
PREVIEW
Despite juggling multiple projects,
graduating,
and starting up his own business,
George has always been there to provide support and be a friend I can rely on.
Many
times, when I was stuck with a task, running the issue by George would reveal insightful
ways of progressing.
George would even be generous enough to pay for dinner and memo-
rabilia from conference travels, invite me to his new oﬃce, and allow me to muck around
with his vintage computers.
When times were hard for me,
George never hesitated to
take signiﬁcant time out of his busy schedule to provide guidance and help.
Chris Mattmann has shown me what it means to be simultaneously a professional
software engineer, researcher, and manager in industry.
I always appreciate his willingness
to work with me and his enthusiasm for our collaborations.
Chris was responsible for (1)
giving me an amazing opportunity to work at the NASA Jet Propulsion Laboratory (JPL)
and (2) spearheading one of the ﬁrst software-engineering research papers that I worked
on.
I am grateful for all the opportunities and help he has given me.
The experiences I had with the other alumni
or senior members of
Neno’s research
group were satisfying and enjoyable in their own unique ways.
I have been lucky to
collaborate with and obtain help from Ivo Krka on multiple research papers and courses.
Our oﬃce and lunch discussions about (1) strategy and tactics for conducting software-
engineering research and (2) TV shows were always enjoyable and informative.
The long
hours working on robots and writing papers with Farshad were stressful
but exciting.
Discussions with Dave about juggling research and industry work at JPL were insightful
and informative.
I am grateful to Yuriy, Sam, and Chiyoung for their generosity in giving
me advice.
I am further honored to have collaborated with Yuriy and Sam and to have
the opportunity to work more with Sam in the near future.
v
PREVIEW
Not only did I interact with one generation of
Neno’s students,
but I also had the
pleasure of working with a new generation of them.
Having the opportunity to write a
paper with Jae was a great experience.
Writing an ESEC/FSE paper with Reza was chal-
lenging and fulﬁlling.
Arman, Daniel Link, Duc, Eder, Jae, Pooyan, Reza, and Youn—I
am honored to have had a chance to work with and socialize with all of you.
Thank you
all
for (1) the support you gave me on my defense day,
(2) the wonderful
mug,
and (3)
the thoughtful cards.
Besides working with Neno’s research group,
one of
the great opportunities I have
had was to collaborate with a variety of other researchers.
I am lucky to have published
an ASE paper with Igor,
who has now become a close friend.
I am honored to have
been able to meet with G.J.
extensively,
publish an ESEC/FSE paper with him,
and
learn from him in general.
It has been a pleasure writing proposals and papers with
Prof.
Yuanfang Cai and her student, Ran; researching Hadoop with Chris Douglas; and
working on architecture recovery with Prof.
Lin Tan and her students,
Thibaud and
Devin.
Not only have I had the opportunity to work with researchers in North America, but I
have had the honor of collaborating with researchers in Brazil.
Those researchers include
Professors Alessandro Garcia,
Arndt von Staa,
and Eduardo Santana de Almeida;
and
their students Isela Macia Bertran, Willian Oizumi, and Simone da Silva Amorim.
As a PhD student,
I was given the opportunity to work at JPL,
thanks to Chris
Mattmann.
Chris
placed me on very interesting scientiﬁc computing and Big Data
projects.
During my time at JPL,
I was fortunate enough to work under Dan Crich-
ton,
Amy Braverman,
and Dana Freeborn.
Furthermore,
I was honored to work with a
vi
PREVIEW
variety of smart people.
Even after leaving,
I am lucky to still
be able to talk to Luca
about music or ask Sean Kelly for programming advice.
I am also grateful
to have had
Mark Nakamura’s help with some portions of the ARCADE study in this dissertation.
Besides working at JPL,
I was fortunate enough to be a research assistant at the
Southern California Earthquake Center (SCEC) during the ﬁrst summer of my PhD. As
part of that assistantship,
I was given the opportunity to work on large-scale data and
computation issues under the supervision of
Phil
Maechling and the guidance of
Scott
Callaghan.
Furthermore, I was honored to have interacted more with Gideon Juve, whose
advice was helpful for experiments I conducted as part of this dissertation.
The completion of key components of this dissertation has been made possible with the
help of other students and researchers.
I would like to thank Periklis Andritsos, Valerio
Maggio,
Spiros Mancoridis,
Onaiza Maqbool,
and Vassilios Tzerpos for their help with
using or implementing their tools or techniques.
I am grateful
to Eric Dashofy,
Chris
Douglas,
Bassel
Haddad,
Chris Mattmann,
Chet Ramey,
and Yongjie Zheng for their
assistance with recovering the ground-truth architectures of ArchStudio, Bash, Hadoop,
and OODT.
My thanks to Rainer Koschke for his help with (1) using his tools and (2)
my early studies of architecture recovery.
I would also like to acknowledge Anita Singh
for her help with the recovery-criterion analysis.
Finally, I am grateful to Ashish Vaswani
for his tips about natural language processing.
Going to conferences has been a great opportunity to get to know a variety of
re-
searchers and practitioners of
software engineering.
To all
the students I have roomed
with,
thank you for sharing expenses and space with me.
Those people include Kivan¸c,
Naeem, Nupul, Sai, and Xu.
Kivan¸
c, may there always be time for anime—even though
vii
PREVIEW
there really isn’t.
Nupul,
the long discussions in our room and at USC have been en-
tertaining.
Naeem,
thank you for being so forthcoming and helpful
as a roommate and
with my transition to Virginia.
Sai,
thank you for being a hospitable and respectful
roommate—twice.
I am also grateful
to the students who I have had signiﬁcant interactions with after
meeting them at conferences.
Robert Dyer,
it has been a pleasure interacting with you
at conferences and online.
Suman,
I am glad we have been able to keep in touch,
even
years after meeting at my ﬁrst software-engineering conference.
Adrian Kuhn, thank you
for your support as I learned about the intersection of information retrieval and software
engineering.
Performing administrative tasks at USC would be signiﬁcantly more diﬃcult without
the support of
the staﬀ at USC.
To Lizsl
and Steve,
thank you for all
your help with
the PhD and undergraduate programs.
To Julie,
I appreciate all
your assistance with
completing administrative tasks.
The eﬀorts of these and other staﬀ members have helped
to simplify a complex journey.
To my extended family (especially my family in the Philippines), I want to thank you
for supporting my life and my formal
education.
You all
have been there for me in a
variety of ways; I very much appreciate all of that and will never forget it.
In particular,
I would like to mention the love and support of my grandparents (Aiding and Will), my
aunts (Khendy, Agnes, Dwin, and Sara), and uncles (Junie, Sonny, and Bovic).
My girlfriend’s family and family friends have also extended their assistance to me
and my girlfriend during the course of working on my PhD.
To them,
I want to extend
my gratitude for all they have done for me and her.
In particular, I would like to mention
viii
PREVIEW
her parents (Malou and Hermie),
her brothers (C.J. and Chris),
her aunts (Margee and
Betty), and her brother’s girlfriend (Fran).
I need to acknowledge my doggy children,
Nikki
and Lily.
Even though they can’t
read any of
this,
they have helped brighten my darker days,
especially along my PhD
journey.
I wish Nikki were still around to help us celebrate the end of it.
Nikki was the
biggest loss during my PhD journey;
and I will
miss her always!
Luckily,
Lily was my
little “return to happiness”—that’s actually what her name means.
I am forever grateful to my parents, Jose and Patricia, for all their sacriﬁces, love, and
support.
Without their help, I could not have started the PhD, let alone ﬁnish it.
Their
presence in my life and support of my decisions has been an incredible blessing.
From
before my birth until
now,
all
the time,
money,
and eﬀort you expended on me is very
much appreciated—I am extremely lucky to have the two of you; and I love you both.
Finally, I must express my love and appreciation to my long-time girlfriend, Catherine.
She has been there for me and supported me through the many ups and downs of
my
PhD journey.
In fact,
she’s been there for me since the end of
high school.
I am very
lucky to have had her with me through so many journeys in my life, including this PhD
journey that is coming to a close.
I do not know how I could have made it through some
of the most diﬃcult times of my life without her.
Cathy, I love you with all my heart!
Thank you all again for being part of my PhD journey!
For everyone I did not mention
by name,
forgive me for not doing so—your help is much appreciated.
I hope that,
if I
have not done so already,
I will
be able to give back for all
that everyone has done for
me.
ix
PREVIEW
Table of Contents
Dedication
ii
Acknowledgments
iii
List of Figures
xii
Abstract
xiv
Chapter 1
Introduction
1
1.1
Problems
2
1.2
Contributions
4
Chapter 2
Defining Architectural Smells
8
2.1
Deﬁnition
10
2.2
Systems Under Discussion
12
2.3
Initial Architectural Smells
16
Chapter 3
Formalizing and Detecting Architectural Smells
31
3.1
Architectural Concept Formalization
31
3.2
Formal Architectural-Smell Deﬁnitions
37
3.3
Detection of Architectural Smells
44
Chapter 4
Framework for Ground-Truth Architecture Recovery
51
4.1
Mapping Principles
53
4.2
Ground-Truth Recovery Process
59
Chapter 5
Enhancing Architectural Recovery Using Concerns
70
5.1
Obtaining Concerns through Probabilistic Topic Models
72
5.2
Brick Recovery
77
5.3
Concern Meta-Classiﬁcation
80
5.4
Brick Classiﬁcation
83
Chapter 6
Framework for Studying Architectural Change and Decay
86
6.1
Foundation
86
6.2
ARCADE
92
x
PREVIEW
Chapter 7
Evaluation
97
7.1
Applying the Ground-Truth Recovery Framework
97
7.2
A Comparative Analysis of Recovery Techniques
120
7.3
An Empirical
Study of
Architectural
Change and Decay in Open-Source
Software Systems
148
Chapter 8
Related Work
166
8.1
Architectural Smells
166
8.2
Architecture Recovery
172
8.3
Architectural Evolution
180
Chapter 9
Conclusion and Future Work
183
9.1
Future Work
186
References
192
xi
PREVIEW
List of Figures
2.1
Structural View of the Grid Reference Architecture
13
2.2
System Stack Layers in MIDAS
15
2.3
The top diagram depicts Connector Envy involving communication and
facilitation services.
The bottom diagram shows Connector Envy involving
a conversion service.
18
2.4
The Scattered Parasitic Functionality occurring across three components.
22
2.5
An Ambiguous Interface is implemented using a single public method with
a generic type as a parameter.
24
2.6
The connector SoftwareEventBus is accompanied by a direct method in-
vocation between two components.
27
3.1
Shorthand Predicates for Architectural Connectivity
37
4.1
Classiﬁcation of the principles used for ground-truth recovery.
53
4.2
Diﬀerent ways of applying mapping principles.
54
4.3
For the same groups and classes,
a sequence of
principles can result in
signiﬁcantly diﬀerent groupings.
58
4.4
The ground-truth recovery of Hadoop 0.19.0 showing the main components
of
the Map/Reduce and HDFS subsystems.
At this magniﬁcation,
the
ﬁgure is intended only as an illustration of
Hadoop’s complexity.
This
diagram can be found fully magniﬁed at [9].
60
4.5
The process for obtaining ground-truth recoveries.
61
5.1
Overall approach for recovering components and connectors
71
xii
PREVIEW
5.2
An LDA model of Hadoop 0.19.0 with 40 topics
76
6.1
ARCADE’s key components and the artifacts it uses and produces.
93
7.1
Summary information about systems recovered
98
7.2
An architectural diagram from Hadoop’s documentation.
100
7.3
For Hadoop, an application principle overrides a domain principle.
101
7.4
Two views of Hadoop’s ground-truth architecture.
101
7.5
Conceptual architecture of Bash.
102
7.6
Ground-truth architecture of Bash.
103
7.7
Conceptural architecture of ArchStudio.
104
7.8
Ground-truth architecture of ArchStudio.
105
7.9
Conceptual architecture of OODT.
106
7.10 Ground-truth architecture of OODT.
107
7.11 Data on the number of entities within components
112
7.12 Data on the number of core and utility components
112
7.13 The extent to which package or directory structures represent the architecture112
7.14 Time spent by recoverers and certiﬁers,
and the number and purpose of
exchanged email messages
115
xiii
PREVIEW
Abstract
The eﬀort and cost of software maintenance tends to dominate other activities in a soft-
ware system’s lifecycle.
A critical aspect of maintenance is understanding and updating a
software system’s architecture.
However, the maintenance of a system’s architecture is ex-
acerbated by the related phenomena of architectural
drift
and
erosion
[164]—collectively
called architectural
decay
—which are caused by careless,
unintended addition,
removal,
and/or modiﬁcation of architectural design decisions.
These phenomena make the archi-
tecture more diﬃcult to understand and maintain and, in more severe cases, can lead to
errors that result in wasted eﬀort or loss of time or money.
To deal
with architectural
decay, an engineer must be able to obtain (1) the current architecture of her system and
understand (2) the symptoms of decay that may occur in a software system and (3) the
manner in which architectures tend to change and the decay it often causes.
The high-level contribution of this dissertation is a uniﬁed framework for addressing
diﬀerent aspects of architectural
decay in software systems.
This framework includes a
catalog comprising an expansive list of architectural
smells (i.e.,
architectural-decay in-
stances) and a means of
identifying such smells in software architectures;
a framework
for constructing ground-truth architectures to aid the evaluation of automated recovery
xiv
PREVIEW
techniques;
ARC, a novel recovery approach that is accurate and extracts rich architec-
tural abstractions; and ARCADE, a framework for the study of architectural change and
decay.
Together,
these aspects of
the uniﬁed framework are a comprehensive means of
addressing the diﬀerent problems that arise due to architectural decay.
This dissertation provides several evaluations of its diﬀerent contributions:
it presents
case studies of architectural smells,
describes lessons learned from applying the ground-
truth recovery framework, compares architecture-recovery techniques along multiple accu-
racy measures, and contributes the most extensive empirical study of architectural change
and decay to date.
This dissertation’s comparative analysis of architecture-recovery tech-
niques addresses several shortcomings of previous analyses, including the quality of ground
truth utilized, the selection of recovery techniques to be analyzed, and the limited number
of perspectives from which the techniques are evaluated.
The empirical study of architec-
tural change and decay in this dissertation is the largest empirical study to date of its kind
in long-lived software systems; the study comprises over 112 million source-lines-of-code
and 460 system versions from a dozen software systems.
xv
PREVIEW
Chapter 1
Introduction
The eﬀort and cost of software maintenance tends to dominate other activities in a soft-
ware system’s lifecycle.
A critical aspect of maintenance is understanding and updating a
software system’s architecture.
However, the maintenance of a system’s architecture is ex-
acerbated by the related phenomena of architectural
drift
and
erosion
[164]—collectively
called architectural
decay
—which are caused by careless,
unintended addition,
removal,
and/or modiﬁcation of architectural design decisions.
These phenomena make the archi-
tecture more diﬃcult to understand and maintain and, in more severe cases, can lead to
errors that result in wasted eﬀort or loss of time or money.
To deal
with architectural
decay, an engineer must be able to obtain (1) the current architecture of her system and
understand (2) the symptoms of decay that may occur in a software system and (3) the
manner in which architectures tend to change and the decay it often causes.
The rest of this chapter is organized as follows.
Section 1.1 describes the key problems
that motivate this dissertation; Section 1.2 overviews the contributions that address those
problems.
1
PREVIEW
1.1
Problems
To determine the current architecture of a software system, a number of techniques have
been proposed to help
recover
a system’s architecture from its implementation [51,
91].
However, existing architecture-recovery techniques are known to suﬀer from inaccuracies
and typically return diﬀerent results as “the architecture” for the same system.
In turn,
this can lead to (1) diﬃculties in assessing a recovery technique, (2) risks in relying on a
given technique, and (3) ﬂawed strategies for improving a technique.
These problems to a large extent stem from
a lack of “ground truths” preventing high
quality evaluation of architecture-recovery techniques
.
We refer to each such baseline as a
ground truth
.
In this context, a ground truth is the architecture of a software system that
has been veriﬁed as accurate by the system’s architects or developers who have intimate
knowledge of the underlying application and problem domain.
Such knowledge is often
undocumented and thus less likely to be known to engineers who were not involved
in constructing the system.
There are examples in the literature of
researchers who
had a similar motivation to ours and who had extensively studied and documented the
architectures of
existing applications,
but without the involvement of
the applications’
own engineers (e.g., [32, 117]).
Besides the obstacles that exist in evaluating recovery techniques,
these
techniques
are limited in the types of constructs that they can automatically extract from a system’s
implementation
.
Automated recovery techniques mainly map implementation-level enti-
ties to high-level
system
components
by clustering the entities and taking the resulting
2
PREVIEW
clusters to be components [17,
90,
110,
15,
127,
169].
However,
existing automated re-
covery techniques obtain neither a system’s
concerns
nor its
connectors
.
Concerns are
associated with a system’s components and are the responsibilities,
concepts,
or roles
in a software system.
Connectors play a critical
role in mediating component interac-
tions [164].
Engineers need to examine these elements in order to examine architectural
decay in a software system.
By not recovering concerns associated with the components,
the prevailing coupling-and-cohesion-based clustering methods make it diﬃcult to under-
stand the meaning of a cluster or whether a cluster truly represents a component.
In the
case of recovery techniques for connectors, those techniques uniformly depend on signif-
icant human involvement.
In particular,
existing techniques for connector recovery use
patterns or queries to identify the connectors within a system [55,
75,
124,
152].
These
techniques require an architect to write a pattern or query for each implementation vari-
ant of every possible connector type.
Creating such speciﬁcations is a manual task that
can be time consuming and error prone.
To deal
with architectural
decay once an architecture is recovered,
the instances of
such decay must be identiﬁed
.
Although decay has been studied at the code level, research
about the symptoms of architectural decay that can occur and the means of detecting that
decay have been highly limited.
The diﬀerent kinds of architectural constructs that can
decay (e.g., components, connectors, conﬁgurations and interfaces) and the consequences
of
such decay are poorly understood.
In turn,
the ill-conceived design decisions that
negatively aﬀect the maintainability of a software system’s architecture have been largely
neglected.
3
PREVIEW
Despite neglecting the diﬀerent symptoms of architectural decay, the study of software
architecture,
from its very inception,
has recognized architectural
decay in general
as a
regularly-occurring phenomenon in long-lived systems.
At the same time,
there is a
relative dearth of empirical
data about the nature of architectural
change and the actual
extent
of
decay in existing systems
.
With such empirical
data,
engineers can better
understand architectural
change,
the decay associated with (and often caused by) that
change, and ultimately, the very nature of architectural decay.
In turn, such a study can
allow engineers to determine strategies for stemming that decay.
1.2
Contributions
The high-level
contribution of
this dissertation is a uniﬁed framework for addressing
diﬀerent aspects of architectural
decay in software systems.
The framework provides a
(1) means of
studying and identifying architectural
decay,
including instances of
decay
and the manner in which decay evolves;
(2) an approach for recovering an accurate and
rich view of the architecture of an implemented system; and (3) support for evaluating and
improving techniques for recovering an architecture from an implementation.
Together,
these aspects of
the framework are a comprehensive means of
addressing the diﬀerent
problems that arise due to architectural
decay.
The speciﬁc individual
contributions of
this dissertation are as follows.
Conceptualization of
Architectural
Smells
.
We deﬁne the concept of
archi-
tectural
smells
,
which are instances of
architectural
decay aﬀecting the structure of
a
system’s architecture.
We then expound upon a set of four initial
smells by describing
4
PREVIEW
them in detail and illustrating their occurence in case studies from research literature and
our own architectural recovery [32] [118] and industrial maintenance eﬀorts.
Catalog of Architectural Smells and Mechanisms for Detecting Smells
.
We
formalize architectural
concepts in order to incorporate the notion of
concerns into ar-
chitecture and rigorously distinguish between components and connectors.
This formal-
ization of architectural concepts allows us to formalize an expanded list of architectural
smell
deﬁnitions.
We directly use these formalized smell
deﬁnitions and architectural
concepts to help us produce algorithms to detect diﬀerent types of smells automatically.
A Framework for Obtaining Ground-Truth Architectures
.
We present
a
framework intended to aid the recovery of
ground-truth architectures.
The framework
deﬁnes a set of principles and a process that results in a reliable ground-truth recovery.
The process involves an architect or long-term contributor of
the system in a limited
yet meaningful way.
The framework’s principles, referred to as
mapping principles
, serve
as rules or guidelines for grouping code-level entities into architectural elements and for
identifying the elements’ interfaces.
The framework bases these principles on four types
of
information used to obtain ground truth:
generic information
(e.g.,
system-module
dependencies),
domain information
(e.g., architectural-style rules),
application informa-
tion
(e.g.,
the purpose of the source code elements),
and information about the
system
context
(e.g., the programming language used).
We further discuss our ﬁndings in obtaining the ground-truth architectures for four
existing systems.
The systems in our study come from several problem domains, including
large-scale data-intensive computing; architectural modeling and analysis; and operating
system command-line shells.
These software systems have been used and maintained for
5
PREVIEW
years,
are written in Java or C,
and range from 70 KSLOC to 280 KSLOC.
For each
system,
we had access to one or two of
its architects or key developers.
The variety
of
the systems allowed us to form some general
insights about obtaining ground-truth
architectures.
We also discuss our experience and lessons learned in enlisting the help of
the systems’ engineers.
Enhancement of Architectural Recovery Using Concerns
.
We provide a novel
technique that extracts system concerns and leverages them to automate the recovery of
both components and connectors.
The objective of this work is to obtain automatically
recovered software architectures that are more comprehensive and more accurate than
those yielded by current methods.
To better understand the accuracy of existing architecture recovery techniques and to
address the shortcomings encountered in previous comparative studies of such techniques,
we present a comparative analysis of
six automated recovery techniques,
including our
novel recovery technique.
Each recovery technique is applied to a set of eight ground-truth
architectures and evaluated for accuracy using three architecture-recovery metrics—one
widely-used metric and two novel metrics.
Our results indicate that two of the selected recovery techniques (of which one of them
is our own recovery technique) are superior to the rest along multiple measures.
However,
the results also show that there is signiﬁcant room for improvement in all of the studied
techniques.
In fact, while the accuracy of individual techniques varies across the diﬀerent
subject systems, on the whole the techniques performed surprisingly poorly.
We discuss
the threats to our study’s validity,
the possible reasons behind our results,
and several
possible avenues of future research in automated architecture recovery.
6
PREVIEW
A Workbench for Evaluating Architectural
Change and Decay
.
To study
architectural
change,
the decay associated with (and often caused by) that change,
and
ultimately,
the very nature of
architectural
decay,
we present a novel
approach,
Archi-
tecture Recovery,
Change,
And Decay Evaluator (ARCADE)
.
ARCADE is a software
workbench that employs (1) a suite of architecture-recovery techniques,
(2) a catalogue
of architectural smell deﬁnitions, (3) accompanying smell-detection algorithms, and (4) a
set of metrics for measuring diﬀerent aspects of architectural change and decay.
ARCADE
leverages these four elements to construct an expansive view showcasing the actual
(as
opposed to idealized) evolution of a software system’s architecture.
While analogous anal-
yses have been attempted at the level of system implementation [95, 68, 88, 37, 52, 132],
ARCADE represents the ﬁrst solution of which we are aware that enables investigating
such issues at the level
of architecture.
To demonstrate the kinds of research questions
that can be pursued using ARCADE, we have performed an empirical study in which we
analyzed several
hundred versions of 12 open-source Apache systems,
totaling over 112
million source-lines-of-code (SLOC).
7
PREVIEW
Chapter 2
Defining Architectural Smells
As the cost of developing software increases,
so does the incentive to evolve and adapt
existing systems to meet new requirements,
rather than building entirely new systems.
Today,
it is not uncommon for a software application family to be maintained and up-
graded over a span of ﬁve years,
ten years,
or longer.
However,
in order to successfully
modify a legacy application to support new functionality, run on new platforms, or inte-
grate with new systems, evolution must be carefully managed and executed.
Frequently,
it is necessary to
refactor
[125],
or restructure the design of
a system,
so that new re-
quirements can be supported in an eﬃcient and reliable manner.
The most commonly used way to determine how to refactor is to identify code
bad
smells
[57] [125].
Code smells are implementation structures that negatively aﬀect system
lifecycle properties
,
such as understandability,
testability,
extensibility,
and reusability;
that is, code smells ultimately result in maintainability problems.
Common examples of
code smells include very long parameter lists and duplicated code (i.e.,
clones).
Code
smells are deﬁned in terms of
implementation-level
constructs, such as methods, classes,
parameters,
and statements.
Consequently,
refactoring methods to correct code smells
8
PREVIEW
